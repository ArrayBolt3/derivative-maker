#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$MYDIR/pre"
source "$MYDIR/colors"
source "$MYDIR/variables"

error_handler_chroot-raw() {
   : echo "
${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND
${red}${bold}ERROR $BASH_SOURCE: | caller: $(caller)${reset}
"
   exit 1
}

main() {
   trap "error_handler_chroot-raw" ERR INT TERM

   root_check

   sync

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ]; then
      true
   else

      #########
      ## /dev #
      #########
      ## update-grub
      ## W: Couldn't identify type of root file system for fsck hook
      ##
      ## setupcon: None of /etc/default/keyboard, /etc/default/console-setup, /home/user/.console-setup, /home/user/.keyboard exists.
      ##
      ## /usr/share/initramfs-tools/hooks/keymap: 35: /usr/share/initramfs-tools/hooks/keymap: cannot open /var/tmp/mkinitramfs_2xz9rK/morefiles: No such file
      ##
      ## In past we needed /dev to create a swapfile.
      ## dd if=/dev/zero of=/swapfile1 bs=1024 count=524288
      mount --bind "/dev" "$CHROOT_FOLDER/dev"

      ##########
      ## /proc #
      ##########

      mount --bind "/proc" "$CHROOT_FOLDER/proc"

      #########
      ## /sys #
      #########

      #mount --bind "/sys" "$CHROOT_FOLDER/sys"

      #############
      ## /dev/pts #
      #############

      ## required by unbuffer
      ## (required by apt-get-wrapper)
      mount --bind "/dev/pts" "$CHROOT_FOLDER/dev/pts"

      ## {{{

      ## fuse postinst uses udevadm without hardcoding the path fortunately.
      ## default search path of /sbin/udevadm:
      ## `which udevadm`
      ## /sbin/udevadm
      ##
      ## Content of the PATH environment variable during fuse postinst:
      #/usr/sbin:/usr/bin:/sbin:/bin

      #mkdir --parents "$CHROOT_FOLDER/usr/bin"
      ## File needs to exist before we can use mount.
      #touch "$CHROOT_FOLDER/usr/bin/udevadm"
      ## Workaround to install fuse.
      ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=934457
      ## Bind mount dummy udevadm to /usr/bin/udevadm in chroot so it will take
      ## preference over the real /sbin/udevadm.
      #mount --bind "$WHONIX_SOURCE_FOLDER/help-steps/udevadm" "$CHROOT_FOLDER/usr/bin/udevadm"

      ## }}}
   fi

   ## Leftover from build process using mmdebstrap.
   rm --force "$CHROOT_FOLDER/etc/apt/apt.conf.d/99mmdebstrap"

   ##########################
   ## /etc/apt/sources.list #
   ##########################

   ## XXX: This is not the cleanest solution. Doesn't belong here.
   ## Other options:
   ## - Using `grml-debootstrap` with `--post-scripts`.
   ## - Inventing another build step just for this which would then require another
   ##   mount and umount. Since too many mount/umount actions can lead to triggering bugs,
   ##   this is best avoided.
   ## Both other options seem more complex and error-prone than this hack.

   test -f "$whonix_build_sources_list_primary"

   if test -f "$CHROOT_FOLDER/etc/apt/sources.list" ; then
      if diff "$whonix_build_sources_list_primary" "$CHROOT_FOLDER/etc/apt/sources.list" ; then
         true "INFO: Host $whonix_build_sources_list_primary matches chroot $CHROOT_FOLDER/etc/apt/sources.list, deleting, ok."
         rm --force "$CHROOT_FOLDER/etc/apt/sources.list"
      else
         error "ERROR: Host $whonix_build_sources_list_primary does not match chroot $CHROOT_FOLDER/etc/apt/sources.list"
      fi
   else
      true "INFO: chroot $CHROOT_FOLDER/etc/apt/sources.list, does not exist, ok."
   fi

   base_name_whonix_build_sources_list_primary="$(basename "$whonix_build_sources_list_primary")"
   file_to_delete_maybe="/etc/apt/sources.list.d/0000"
   file_to_delete_maybe+="$base_name_whonix_build_sources_list_primary"
   ## example file_to_delete_maybe:
   ## /etc/apt/sources.list.d/0000debian_stable_current_clearnet.list

   if test -f "$CHROOT_FOLDER/$file_to_delete_maybe" ; then
      if diff "$whonix_build_sources_list_primary" "$CHROOT_FOLDER/$file_to_delete_maybe" ; then
         true "INFO: Host $whonix_build_sources_list_primary matches chroot $CHROOT_FOLDER/$file_to_delete_maybe, deleting, ok."
         rm --force "$CHROOT_FOLDER/$file_to_delete_maybe"
      else
         error "ERROR: Host $whonix_build_sources_list_primary does not match chroot $CHROOT_FOLDER/$file_to_delete_maybe"
      fi
   else
      true "INFO: chroot $CHROOT_FOLDER/$file_to_delete_maybe, does not exist, ok."
   fi

   ################
   ## mount files #
   ################

   ## controversy of:
   ## /etc/resolv.conf /etc/hosts /etc/hostname

   ## When we are inside chroot, we need a functional /etc/resolv.conf,
   ## otherwise DNS lookups and subsequently apt-get and curl would be defunct.
   ## On the other hand, we do not want to copy /etc/resolv.conf from the
   ## build machine into chroot, to prevent leaking personal data into chroot.
   ## Therefore we use /etc/resolv.conf from the host inside chroot,
   ## without ever writing it. (Mounting)

   ## When we are inside chroot, we need correct /etc/hosts and /etc/hostname
   ## files, otherwise commands such as:
   ##     sudo -u root echo 'This is a test echo.'
   ## would show for example
   ##     sudo: unable to resolve host debian
   ## and take a long time to complete.

   ## We need two commands to remount an existing file as read only.
   ## Thanks to: https://lwn.net/Articles/281157/
   ## Remount as read only...
   ## Does not work on Debian Wheezy.
   ## Not required anymore. We are not starting any services, DHCP or
   ## networking inside the chroot, so the file should remain untouched.
   #mount -o remount,ro,noload "$CHROOT_FOLDER/etc/resolv.conf"

   sync

   local mount_base_file ok_if_match_file is_ok
   local host_system_file_full_path system_file_copy_full_path

   ## If Whonix version already inside chroot, don't delete, keep as is, ok.
   ## If host version inside chroot, delete, ok.
   ## Empty version exists inside chroot in any case, ok.
   ## If WHONIX_CHROOT_MOUNT_RESOLV_CONF=0: don't mount; empty file.
   ## If WHONIX_CHROOT_MOUNT_RESOLV_CONF=1: mount host version inside chroot.

   if [ ! -d "$WHONIX_BINARY/system-files-copy/etc" ]; then
      sudo $SUDO_OPTS mkdir --parents "$WHONIX_BINARY/system-files-copy/etc"
   fi

   for mount_base_file in "etc/resolv.conf" "etc/hosts" "etc/hostname" ; do
      ## Backup exiting $mount_base_file, so we can later use it to safely mount it inside chroot.
      ## Safely meaning, even if the chroot overwrites it, the host version remains unchanged.
      host_system_file_full_path="/$mount_base_file"

      host_system_file_base_name="$(basename "$host_system_file_full_path")"
      system_file_copy_full_path="$WHONIX_BINARY/system-files-copy/etc/$host_system_file_base_name"

      if [ -f "$host_system_file_full_path" ]; then
         ## Not using.
         ## Otherwise /etc/apt/sources.list.backup leaks Whonix build sources inside VM.
         ## Otherwise host /etc/resolv.conf ends up inside VM.
         #cp --no-clobber --preserve "$1" "$1.backup"

         ## Not using 'sudo $SUDO_OPTS' since that would fail if file is not accessible by user "user".
         cp --preserve "$host_system_file_full_path" "$system_file_copy_full_path"
      else
         true "INFO: file '$host_system_file_full_path' does not exist, skipping copy, ok."
         if [ -f "$system_file_copy_full_path" ]; then
            true "INFO: Deleting stale version from previous run..."
            rm --verbose "$system_file_copy_full_path"
         fi
         ## Create empty file to make sure it exists.
         touch "$system_file_copy_full_path"
      fi
      chown "$user_name:$user_name" "$system_file_copy_full_path"

      ## Delete inside chroot if host version leaked into it previously through
      ## another process such as perhaps mmdebstrap.
      if diff "$host_system_file_full_path" "$CHROOT_FOLDER/$mount_base_file" >/dev/null ; then
         true "INFO #1: Host '/$mount_base_file' matches '$CHROOT_FOLDER/$mount_base_file'"

         is_ok=no
         for ok_if_match_file in \
            "$WHONIX_SOURCE_FOLDER/packages/whonix-gw-network-conf/etc/resolv.conf.whonix" \
            "$WHONIX_SOURCE_FOLDER/packages/whonix-ws-network-conf/etc/resolv.conf.whonix" \
            "$WHONIX_SOURCE_FOLDER/packages/whonix-base-files/etc/hosts.whonix" \
            "$WHONIX_SOURCE_FOLDER/packages/whonix-base-files/etc/hostname.whonix" \
            ; do
               if diff "$CHROOT_FOLDER/$mount_base_file" "$ok_if_match_file" >/dev/null ; then
                  true "INFO #1: But '$CHROOT_FOLDER/$mount_base_file' also matches '$ok_if_match_file', ok."
                  is_ok=yes
                  break
               fi
         done
         if [ "$is_ok" = "no" ]; then
            if [ "$WHONIX_BUILD_SHORT_TYPE" = "whonix" ]; then
               true "INFO #1: WHONIX_BUILD_SHORT_TYPE: $WHONIX_BUILD_SHORT_TYPE Therefore shredding '$CHROOT_FOLDER/$mount_base_file'."
               ## Delete leaked host $mount_base_file (such as perhaps by grml-debootstrap) inside image.
               shred -u --zero --force --random-source=/dev/random "$CHROOT_FOLDER/$mount_base_file"
            else
               true "INFO #1: WHONIX_BUILD_SHORT_TYPE: $WHONIX_BUILD_SHORT_TYPE Therefore not touching '$CHROOT_FOLDER/$mount_base_file'."
            fi
         fi
      else
         true "INFO #1: Host '/$mount_base_file' does not match '$CHROOT_FOLDER/$mount_base_file', ok"
      fi

      ## File needs to exist to be able to mount in next step.
      touch "$CHROOT_FOLDER/$mount_base_file"

      if [ "$WHONIX_CHROOT_MOUNT_RESOLV_CONF" = "0" ]; then
         true "${cyan}INFO $BASH_SOURCE: Not mounting /$mount_base_file and others inside chroot, because WHONIX_CHROOT_MOUNT_RESOLV_CONF is 0.${reset}"
         continue
      fi

      mount --bind "$WHONIX_BINARY/system-files-copy/$mount_base_file" "$CHROOT_FOLDER/$mount_base_file"
   done

   sync
}

main "$@"
