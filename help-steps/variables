#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

if [ ! "$dist_build_no_unset_xtrace" = "true" ]; then
   set +x
fi
#set -x

#echo "INFO: Currently running script: $BASH_SOURCE"

## {{ Sanity Tests.

command -v logname >/dev/null
command -v whoami >/dev/null
command -v dirname >/dev/null
command -v basename >/dev/null
command -v awk >/dev/null
command -v grep >/dev/null

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

bash -n "$BASH_SOURCE"

## }}

user_name_detection() {
   ## Since the script runs as root, we can not use $USER or whoami (that would be set to root).
   if [ ! "$user_name" = "" ]; then
      return 0
   fi
   if [ ! "$SUDO_USER" = "" ]; then
      true "INFO $BASH_SOURCE: Setting user_name to SUDO_USER $SUDO_USER..."
      user_name="$SUDO_USER"
   fi
   if [ "$user_name" = "" ] || [ "$user_name" = "root" ]; then
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`logname\`."
      user_name="$(logname)" || true
   fi
   if [ "$user_name" = "" ] || [ "$user_name" = "root" ]; then
      echo "INFO $BASH_SOURCE: SUDO_USER: $SUDO_USER"
      true "INFO $BASH_SOURCE: Trying to set user_name by using \`whoami\`."
      user_name="$(whoami)"
      echo "INFO $BASH_SOURCE: Set user_name to $user_name using whoami."
   fi
   if [ "$user_name" = "" ]; then
      error "Variable user_name is empty."
   fi
}

user_name_detection
export user_name

[ -n "$SUDO_OPTS" ] || SUDO_OPTS="--non-interactive -u $user_name"

[ -n "$HOMEVAR" ] || HOMEVAR="/home/$user_name"
export HOMEVAR
[ -n "$binary_build_folder_dist" ] || binary_build_folder_dist="$HOMEVAR/derivative-binary"
export binary_build_folder_dist

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[ -n "$source_code_folder_dist" ] || source_code_folder_dist="$(dirname "$MYDIR")"
export source_code_folder_dist

build_script_main="$source_code_folder_dist/derivative-maker"

[ -n "$dist_parent_folder" ] || dist_parent_folder="$(dirname "$source_code_folder_dist")"
[ -n "$dist_developer_meta_files_folder" ] || dist_developer_meta_files_folder="$source_code_folder_dist/packages/Kicksecure/developer-meta-files"

[ -n "$dist_source_parentdir" ] || dist_source_parentdir="$(dirname "$source_code_folder_dist")"
export dist_source_parentdir

[ -n "$dist_source_help_steps_folder" ] || dist_source_help_steps_folder="$source_code_folder_dist/help-steps"
export dist_source_help_steps_folder

cd "$source_code_folder_dist"

[ -n "$dist_aptgetopt_file" ] || dist_aptgetopt_file="$binary_build_folder_dist/aptgetopt.conf"
export dist_aptgetopt_file
rm -f "$dist_aptgetopt_file"

aptgetopt_add() {
   APTGETOPT[${#APTGETOPT[@]}]="$1"
   APTGETOPT_ALT="$APTGETOPT_ALT $1"
}

aptgetopt_conf_add () {
   sudo $SUDO_OPTS mkdir --parents "$binary_build_folder_dist/"
   echo "$1" | sudo $SUDO_OPTS tee --append "$dist_aptgetopt_file" >/dev/null
}

## Avoiding "perl: warning: Setting locale failed." as suggested on
## https://wiki.ubuntu.com/DebootstrapChroot and
## https://lists.debian.org/debian-amd64/2005/08/msg00249.html.
#[ -n "$LANG" ] || LANG="C"
LANG="C"
export LANG

## Deterministic.
LC_ALL=C.UTF-8
TZ=UTC
export LC_ALL TZ

## Disable uwt while building Whonix,
## because it is not functional while building Whonix from source code.
echo 'INFO: Setting... export UWT_DEV_PASSTHROUGH="1"'
[ -n "$UWT_DEV_PASSTHROUGH" ] || UWT_DEV_PASSTHROUGH="1"
export UWT_DEV_PASSTHROUGH

## used by mmdebstrap
## do not export without thinking this through since also used by debhelper
SOURCE_DATE_EPOCH="$(dpkg-parsechangelog -STimestamp)"

[ -n "$DEBDEBUG" ] || DEBDEBUG="1"
export DEBDEBUG

[ -n "$tpo_downloader_debug" ] || tpo_downloader_debug="1"
export tpo_downloader_debug

if [ ! "$dist_build_one_parsed" = "1" ]; then
   MINUS_X_SET="0"
   test -o xtrace || { MINUS_X_SET="$?" ; true; };
   if [ "$MINUS_X_SET" = "0" ]; then
      ## -x was set
      bash -n "$source_code_folder_dist/help-steps/parse-cmd"
      source "$source_code_folder_dist/help-steps/parse-cmd"
      dist_build_one_parse_cmd "$@"
   else
      ## -x was not set
      set -x
      bash -n "$source_code_folder_dist/help-steps/parse-cmd"
      source "$source_code_folder_dist/help-steps/parse-cmd"
      dist_build_one_parse_cmd "$@"
      set +x
   fi
   dist_build_one_parsed="1"
   export dist_build_one_parsed
fi

export dist_build_sources_list_primary

if [ "$dist_build_flavor" = "whonix-gateway-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-XFCE"
   [ -n "$VMRAM" ] || VMRAM="1280"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="gateway"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="XFCE"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" non-qubes-whonix-gateway-xfce "
fi

if [ "$dist_build_flavor" = "whonix-gateway-rpi" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-RPi"
   [ -n "$VMRAM" ] || VMRAM="768"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="gateway"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="RPi"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" whonix-gateway-rpi "
fi

if [ "$dist_build_flavor" = "whonix-gateway-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Gateway"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Gateway-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="gateway"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CLI"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" non-qubes-whonix-gateway-cli "
fi

if [ "$dist_build_flavor" = "whonix-workstation-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="workstation"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="XFCE"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" non-qubes-whonix-workstation-xfce "
fi

if [ "$dist_build_flavor" = "whonix-workstation-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="workstation"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CLI"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" non-qubes-whonix-workstation-cli "
fi

if [ "$dist_build_flavor" = "whonix-custom-workstation" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Workstation-CUSTOM"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Workstation-CUSTOM"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="custom-workstation"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CUSTOM"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   #[ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" none "
fi

if [ "$dist_build_flavor" = "kicksecure-host-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure-Host"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-Host-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="kicksecure-host"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="kicksecure"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CLI"
   [ -n "$dist_build_host_operating_system" ] || dist_build_host_operating_system="true"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   error "${red}${bold}dist_build_flavor $dist_build_flavor is not implemented.${reset}"
fi

if [ "$dist_build_flavor" = "kicksecure-host-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure-Host"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-Host-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="kicksecure-host"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="kicksecure"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="XFCE"
   [ -n "$dist_build_host_operating_system" ] || dist_build_host_operating_system="true"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   error "${red}${bold}dist_build_flavor $dist_build_flavor is not implemented.${reset}"
fi

if [ "$dist_build_flavor" = "whonix-host-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Host"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Host-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="whonix-host"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CLI"
   [ -n "$dist_build_host_operating_system" ] || dist_build_host_operating_system="true"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"
   error "${red}${bold}dist_build_flavor $dist_build_flavor is not implemented.${reset}"
fi

if [ "$dist_build_flavor" = "whonix-host-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Whonix-Host"
   [ -n "$VMNAME" ] || VMNAME="Whonix-Host-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="whonix-host"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="whonix"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="XFCE"
   [ -n "$dist_build_host_operating_system" ] || dist_build_host_operating_system="true"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="host"

   ## XXX: '--flavor whonix-host-xfce --target iso' currently is hardcoded to KVM.
   if [ "$dist_build_qcow2" = "true" ] || [ "$dist_build_iso" = "true" ]; then
      [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" whonix-host-xfce-kvm-freedom "

      if [ "$build_freedom_only" = "true" ]; then
         true
      elif [ "$build_freedom_only" = "false" ]; then
         [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" whonix-host-xfce-kvm-freedom whonix-host-xfce-kvm-nonfreedom "
      else
         error "${red}${bold}You need to add either '--freedom true' or '--freedom false'!${reset}"
      fi

   else
      ## This would break:
      ## sudo ./help-steps/mount-raw --target raw --build --flavor whonix-host-xfce --freedom false
      #error "${red}${bold}Only 'target --qcow2' is supported for dist_build_flavor $dist_build_flavor for now.${reset}"
      echo "${red}${bold}NOTE: Only 'target --qcow2' is supported for dist_build_flavor $dist_build_flavor for now.${reset}"
   fi
fi

if [ "$dist_build_flavor" = "kicksecure-cli" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-CLI"
   [ -n "$VMRAM" ] || VMRAM="512"
   [ -n "$VRAM" ] || VRAM="16"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="kicksecure"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="kicksecure"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="CLI"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="localhost"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" kicksecure-cli-vm "
fi

if [ "$dist_build_flavor" = "kicksecure-xfce" ]; then
   [ -n "$SHORT_VMNAME" ] || SHORT_VMNAME="Kicksecure"
   [ -n "$VMNAME" ] || VMNAME="Kicksecure-XFCE"
   [ -n "$VMRAM" ] || VMRAM="2048"
   [ -n "$VRAM" ] || VRAM="128"
   [ -n "$dist_build_type_long" ] || dist_build_type_long="kicksecure"
   [ -n "$dist_build_type_short" ] || dist_build_type_short="kicksecure"
   [ -n "$dist_build_desktop" ] || dist_build_desktop="XFCE"
   [ -n "$dist_build_hostname" ] || dist_build_hostname="localhost"
   [ -n "$flavor_meta_packages_to_install" ] || flavor_meta_packages_to_install=" kicksecure-xfce-vm "
fi

export dist_build_type_long

export VMNAME VMRAM VRAM

if [ "$dist_build_type_short" = "kicksecure" ]; then
   [ -n "$derivative_name_list" ] || derivative_name_list="Kicksecure"
else
   [ -n "$derivative_name_list" ] || derivative_name_list="Kicksecure Whonix"
fi

if [ "$dist_build_internal_run" = "1" ]; then
   if [ "$VMNAME" = "" ]; then
      VMNAME="internal"
      export VMNAME
   fi
   [ -n "$derivative_name_list" ] || derivative_name_list="Kicksecure Whonix"
fi

## vmsize 100 GB does not matter because grml-debootstrap creates sparse files,
## i.e. only space, which gets actually filled up, will take disk space.
[ -n "$VMSIZE" ] || VMSIZE="100G"
export VMSIZE

## Disk identifier for grml-debootstrap.
## https://github.com/grml/grml-debootstrap/pull/28
[ -n "$DISK_IDENTIFIER" ] || DISK_IDENTIFIER='26ada0c0-1165-4098-884d-aafd2220c2c6'
export DISK_IDENTIFIER

if [ "$dist_build_install_to_root" = "1" ]; then
   if [ "$CHROOT_FOLDER" = "" ]; then
      CHROOT_FOLDER=""
   fi
else
   [ -n "$CHROOT_FOLDER" ] || CHROOT_FOLDER="$binary_build_folder_dist/${VMNAME}_image"
   dist_build_install_to_root="0"
   export dist_build_install_to_root
fi
export CHROOT_FOLDER

true "variables INFO: CHROOT_FOLDER: $CHROOT_FOLDER"

if [ "$VMNAME" = "unknown" ]; then
   true "variables ERROR: VMNAME is unknown. Please report this bug!"
   exit 1
fi

if [ "$dist_build_internal_run" = "1" ]; then
   echo "variables INFO: Internal run."
else
   true "variables INFO: VMNAME is $VMNAME"
fi

if [ "$VMNAME" = "" ]; then
   MSG="${red}${bold}variables ERROR: VMNAME is empty! Please report this bug!${reset}"
   echo "$MSG"
   error "$MSG"
fi

[ -n "$XZ_OPT" ] || XZ_OPT="--threads=8"
export XZ_OPT

if [ "$dist_build_unsafe_io" = "true" ]; then
   eatmydata_install="true"
   aptgetopt_add "-o Dpkg::Options::=--force-unsafe-io"
   aptgetopt_conf_add "Dpkg::Options:: \"--force-unsafe-io\";"
   libeatmydata_file=/usr/lib/*-linux-gnu/libeatmydata.so
   if test -f "$libeatmydata_file" ; then
      true "INFO: eatmydata installed, preloading."
      if [ -z "$LD_PRELOAD" ]; then
         LD_PRELOAD="$libeatmydata_file"
      else
         LD_PRELOAD="${LD_PRELOAD}:${libeatmydata_file}"
      fi
      export LD_PRELOAD
      SUDO_OPTS="$SUDO_OPTS LD_PRELOAD=$LD_PRELOAD"
   else
      true "INFO: eatmydata not yet installed, not yet preloading."
   fi
   sync() {
      true "$FUNCNAME: Not running $FUNCNAME, because using '--unsafe-io true'."
   }
fi

## use apt-cacher-ng by default
## required for --connection clearnet
## for build_sources apt-cacher-ng http://HTTPS///
[ -n "$REPO_PROXY" ] || REPO_PROXY="http://127.0.0.1:3142"

if [ -n "${REPO_PROXY}" ]; then
   ## apt parameters must be without quotes
   ## apt parameters must be without equals sign
   ## apt parameters must be without collon sign
   ## apt config file must be with quotes
   ## apt config file must be without equals sign
   ## apt config file must be trailign collon sign

   aptgetopt_add "-o Acquire::http::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::http::Proxy \"${REPO_PROXY}\";"

   aptgetopt_add "-o Acquire::https::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::https::Proxy \"${REPO_PROXY}\";"

   aptgetopt_add "-o Acquire::tor::Proxy=${REPO_PROXY}"
   aptgetopt_conf_add "Acquire::tor::Proxy \"${REPO_PROXY}\";"

   DEBOOTSTRAP_PREFIX+=" env http_proxy=${REPO_PROXY}"
   COWBUILDER_PREFIX+=" env http_proxy=${REPO_PROXY}"
fi

## Export COWBUILDER_PREFIX so it is available in make-helper.bsh.
export COWBUILDER_PREFIX

if [ "$dist_build_install_to_root" = "1" ]; then
   if [ "$CHROOT" = "" ]; then
      CHROOT=""
   fi
else
   [ -n "$CHROOT" ] || CHROOT="chroot $CHROOT_FOLDER"
fi

if [ "$no_git" = "1" ]; then
   [ -n "$git_bin" ] || git_bin="true"
else
   [ -n "$git_bin" ] || git_bin="git"
fi

[ -n "$dist_build_grml_bin" ] || dist_build_grml_bin="grml-debootstrap"

[ -n "$rsync_opts" ] || rsync_opts="\
   --links \
   --hard-links \
   --safe-links \
   --owner \
   --group \
   --chown=root:www-data \
   --times \
   --sparse \
   --partial \
   --progress \
   --verbose \
"

## TODO: auto retry function error handler trap lacks variables
## such as variable APTGETOPT.
## Would miss out on security related APT configuration options:
## apt-get --error-on=any / -o APT::Update::Error-Mode=any
[ -n "$dist_build_auto_retry" ] || dist_build_auto_retry="0"

[ -n "$dist_build_wait_auto_retry" ] || dist_build_wait_auto_retry="5"

## Sanity Test.
command -v "$git_bin" >/dev/null

[ -n "$DEB_INSTALL_FOLDER" ] || DEB_INSTALL_FOLDER="/mnt/initialdeb"
export DEB_INSTALL_FOLDER

[ -n "$EMPTY_DIR" ] || EMPTY_DIR="/tmp/empty"
export EMPTY_DIR

## {{{ dist_build_on_operating_system

if [ "$dist_build_on_operating_system_detect_skip" = "1" ]; then
   true "Probably run by prepare-build-machine script. lsb_release may not yet installed. Skipping setting dist_build_on_operating_system."
else
   ## Let's find out on which host operating system the build script is running.
   [ -n "$dist_build_on_operating_system" ] || dist_build_on_operating_system="$(lsb_release --short --i)"
   ## Converting dist_build_on_operating_system to lower case to make later if comparison easier.
   dist_build_on_operating_system="${dist_build_on_operating_system,,}"
   ## Example dist_build_on_operating_system: debian
   ## Example dist_build_on_operating_system: ubuntu
   ## XXX
   if [ "$dist_build_on_operating_system" = "whonix" ]; then
      dist_build_on_operating_system="debian"
   fi
fi

## }}}

## {{{ dist_build_current_git_head

[ -n "$dist_build_current_git_head" ] || dist_build_current_git_head="$($git_bin rev-parse HEAD)"

#echo "dist_build_current_git_head: $dist_build_current_git_head"

## }}}

## {{{ dist_build_version

## --always because travis-ci does not fetch tags.
temp="$($git_bin describe --always --abbrev=1000000000)"

## Examples temp:
## 10-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5-developers-only

if [ "$dist_build_version" = "" ]; then
   dist_build_version="$temp"
   dist_build_version="$(echo "$dist_build_version" | sed "s|-developers-only||g")"
   dist_build_version="$(echo "$dist_build_version" | sed "s|-testers-only||g")"
   dist_build_version="$(echo "$dist_build_version" | sed "s|-stable||g")"
   echo "${cyan}${bold}INFO: Variable dist_build_version was unset. Auto detected. Set to: ${dist_build_version}${reset}"
else
   echo "${cyan}${bold}INFO: Variable dist_build_version was already set to: ${dist_build_version}${reset}"
fi

## Using `export`, so 70_log_build_version can read it.
export dist_build_version

## Example dist_build_version:
## 10.0.0.0.3-13-g20e1b49ff27053784e3e9e163dfd4c98dced73f5

## }}}

if [ "$dist_build_type_long" = "kicksecure" ]; then
   [ -n "$dist_unified_name" ] || dist_unified_name="Kicksecure-${dist_build_desktop}-${dist_build_version}"
else
   [ -n "$dist_unified_name" ] || dist_unified_name="Whonix-${dist_build_desktop}-${dist_build_version}"
fi

[ -n "$dist_binary_build_folder" ] || dist_binary_build_folder="$binary_build_folder_dist/${dist_build_version}"

[ -n "$binary_image_raw" ] || binary_image_raw="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.raw"

[ -n "$binary_image_qcow2" ] || binary_image_qcow2="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"

[ -n "$binary_image_text" ] || binary_image_text="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.text"

[ -n "$binary_image_ova" ] || binary_image_ova="${dist_binary_build_folder}/${dist_unified_name}.ova"
[ -n "$binary_image_ova_signature" ] || binary_image_ova_signature="${dist_binary_build_folder}/${dist_unified_name}.ova.asc"
[ -n "$binary_image_ova_torrent" ] || binary_image_ova_torrent="${dist_binary_build_folder}/${dist_unified_name}.ova.torrent"
[ -n "$binary_image_ova_torrent_signature" ] || binary_image_ova_torrent_signature="${dist_binary_build_folder}/${dist_unified_name}.ova.torrent.asc"

[ -n "$binary_image_iso" ] || binary_image_iso="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.iso"
[ -n "$binary_image_iso_signature" ] || binary_image_iso_signature="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.iso.asc"
[ -n "$binary_image_iso_torrent" ] || binary_image_iso_torrent="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.iso.torrent"
[ -n "$binary_image_iso_torrent_signature" ] || binary_image_iso_torrent_signature="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.iso.torrent.asc"

[ -n "$libvirt_source_kvm_file" ] || libvirt_source_kvm_file="$source_code_folder_dist/packages/libvirt-dist/usr/share/libvirt-dist/xml/${SHORT_VMNAME}.xml"
[ -n "$libvirt_target_kvm_file" ] || libvirt_target_kvm_file="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.xml"

[ -n "$source_utm_file" ] || source_utm_file="$source_code_folder_dist/packages/libvirt-dist/usr/share/whonix-utm/${SHORT_VMNAME}.plist"

[ -n "$libvirt_source_network_file_external" ] || libvirt_source_network_file_external="$source_code_folder_dist/packages/libvirt-dist/usr/share/libvirt-dist/xml/Whonix-External.xml"
[ -n "$libvirt_target_network_file_external" ] || libvirt_target_network_file_external="${dist_binary_build_folder}/Whonix_external_network-${dist_build_version}.xml"

[ -n "$libvirt_source_network_file_internal" ] || libvirt_source_network_file_internal="$source_code_folder_dist/packages/libvirt-dist/usr/share/libvirt-dist/xml/Whonix-Internal.xml"
[ -n "$libvirt_target_network_file_internal" ] || libvirt_target_network_file_internal="${dist_binary_build_folder}/Whonix_internal_network-${dist_build_version}.xml"

[ -n "$libvirt_target_raw_xz_archive" ] || libvirt_target_raw_xz_archive="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.raw.libvirt.xz"
[ -n "$libvirt_target_raw_xz_archive_signature" ] || libvirt_target_raw_xz_archive_signature="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.raw.libvirt.xz.asc"
[ -n "$libvirt_target_raw_xz_archive_torrent" ] || libvirt_target_raw_xz_archive_torrent="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.raw.libvirt.xz.torrent"
[ -n "$libvirt_target_raw_xz_archive_torrent_signature" ] || libvirt_target_raw_xz_archive_torrent_signature="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.raw.libvirt.xz.torrent.asc"

[ -n "$libvirt_target_qcow2_xz_archive" ] || libvirt_target_qcow2_xz_archive="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.qcow2.libvirt.xz"
[ -n "$libvirt_target_qcow2_xz_archive_signature" ] || libvirt_target_qcow2_xz_archive_signature="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.qcow2.libvirt.xz.asc"
[ -n "$libvirt_target_qcow2_xz_archive_torrent" ] || libvirt_target_qcow2_xz_archive_torrent="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.qcow2.libvirt.xz.torrent"
[ -n "$libvirt_target_qcow2_xz_archive_torrent_signature" ] || libvirt_target_qcow2_xz_archive_torrent_signature="${dist_binary_build_folder}/${dist_unified_name}.${target_architecture_pretty_name}.qcow2.libvirt.xz.torrent.asc"

[ -n "$sha_two_hundredth_fifty_six_hash_file" ] || sha_two_hundredth_fifty_six_hash_file="${dist_binary_build_folder}/${dist_unified_name}.sha256sums"
[ -n "$sha_two_hundredth_fifty_six_hash_file_signature" ] || sha_two_hundredth_fifty_six_hash_file_signature="${dist_binary_build_folder}/${dist_unified_name}.sha256sums.asc"

[ -n "$sha_five_hundredth_twelve_hash_file" ] || sha_five_hundredth_twelve_hash_file="${dist_binary_build_folder}/${dist_unified_name}.sha512sums"
[ -n "$sha_five_hundredth_twelve_hash_file_signature" ] || sha_five_hundredth_twelve_hash_file_signature="${dist_binary_build_folder}/${dist_unified_name}.sha512sums.asc"

## TODO: broken
[ -n "$copy_vms_into_raw_file_one" ] || copy_vms_into_raw_file_one="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.qcow2"
[ -n "$copy_vms_into_raw_file_two" ] || copy_vms_into_raw_file_two="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.qcow2"

sudo $SUDO_OPTS mkdir --parents "${dist_binary_build_folder}"

## {{{ buildconfig.d

[ -n "$dist_build_config_dirs" ] || dist_build_config_dirs="$source_code_folder_dist/buildconfig.d /etc/buildconfig-dist.d ../buildconfig.d"

dist_build_source_config_dir() {
   true "${cyan}INFO: Checking if dist_build_config_dir $dist_build_config_dir exists...${reset}"
   if [ -d "$1" ]; then
      true "${cyan}INFO: Parsing $1...${reset}"
      shopt -s nullglob
      local i
      for i in "$1/"*".conf"; do
         bash -n "$i"
         source "$i"
      done
   else
      true "${cyan}INFO: Skipping $1 because it does not exist.${reset}"
   fi
}

for dist_build_config_dir in $dist_build_config_dirs; do
   dist_build_source_config_dir "$dist_build_config_dir"
done

if [ ! "$dist_build_custom_config_dir" = "" ]; then
   dist_build_source_config_dir "$dist_build_custom_config_dir"
fi

if [ ! "$dist_build_conf_file" = "" ]; then
   if [ -f "$dist_build_conf_file" ]; then
      bash -n "$dist_build_conf_file"
      source "$dist_build_conf_file"
   fi
fi

## }}}

export make_use_lintian
export genmkfile_make_cmd
export make_use_cowbuilder
export make_cowbuilder_dist_folder
export make_use_debsign

[ -n "$gpg_bin" ] || gpg_bin="gpg"
#[ -n "$gpg_bin" ] || gpg_bin="qubes-gpg-client-wrapper"

[ -n "$signify_private_key" ] || signify_private_key="/home/$user_name/.signify/keyname.sec"
[ -n "$signify_public_key" ] || signify_public_key="/home/$user_name/.signify/keyname.pub"

## {{{ fallback variables for debchange (dch), dpkg-buildpackage and debuild

[ -n "$DEBFULLNAME" ] || DEBFULLNAME="derivative distribution auto generated local APT signing key"
export DEBFULLNAME

[ -n "$DEBEMAIL" ] || DEBEMAIL="derivative-distribution@local-signing.key"
export DEBEMAIL

[ -n "$dist_build_sign_local_repository" ] || dist_build_sign_local_repository=false

if [ "$dist_build_sign_local_repository" = "true" ]; then
   if [ "$dist_local_signing_key_folder" = "" ]; then
      error_ "dist_build_sign_local_repository is true, but dist_local_signing_key_folder is empty!"
   else
      [ -n "$dist_build_reprepro_signing_options" ] || dist_build_reprepro_signing_options="--gnupghome $dist_local_signing_key_folder"
   fi
fi

if [ "$dist_build_sign_local_repository" = "true" ]; then
   ## For whatever it may be worth.
   ## https://forums.whonix.org/t/end-to-end-signed-debs-debsign-debsig-and-dpkg-sig
   [ -n "$make_use_debsign" ] || make_use_debsign="true"
else
   ## For the local repository, no signatures are required.
   [ -n "$make_use_debsign" ] || make_use_debsign="false"
fi

## }}}

## {{{ apt repository variables

[ -n "$dist_build_apt_codename" ] || dist_build_apt_codename="local"
export dist_build_apt_codename
## developer local setting in buildconfig.d folder:
## export dist_build_apt_codename="bullseye-developers"

## }}}

## {{{ reprepro variables

set_dist_build_reprepro_folder_options() {
   if [ "$derivative_name_item" = "" ]; then
      error "derivative_name_item is empty!"
   fi

   if [ "$reprepro_codename" = "" ]; then
      reprepro_codename="$dist_build_apt_codename"
   fi

   dist_sources_list_temp_build_folder="/var/lib/derivative-maker/sources-temp-list.d"
   dist_sources_list_temp_build_file="$dist_sources_list_temp_build_folder/${derivative_name_item}-temp-initialdeb.list"
   dist_sources_list_temp_initial_deb_sources_list="$CHROOT_FOLDER/$dist_sources_list_temp_build_file"

   if [ "$reprepro_codename" = "local" ]; then
      apt_repo_sub_folder="aptrepo_local/$derivative_name_item"
   else
      apt_repo_sub_folder="aptrepo_remote/$derivative_name_item"
   fi

   dist_apt_repository_folder="$binary_build_folder_dist/$apt_repo_sub_folder"
   export dist_apt_repository_folder

   dist_build_reprepro_folder_options="\
      --basedir $source_code_folder_dist/$apt_repo_sub_folder \
      --outdir $binary_build_folder_dist/$apt_repo_sub_folder \
      --dbdir $binary_build_folder_dist/$apt_repo_sub_folder/db \
      --logdir $binary_build_folder_dist/$apt_repo_sub_folder/log"
   export dist_build_reprepro_folder_options
}

## }}}

## {{{ dist_build_target_arch

## Default architecture.
## Using export, so it can be read by chroot-post.d scripts.
[ -n "$dist_build_target_arch" ] || dist_build_target_arch="amd64"
export dist_build_target_arch

## }}}

[ -n "$host_architecture" ] || host_architecture="$(dpkg --print-architecture)"
export host_architecture

[ -n "$make_cross_build_platform_list" ] || make_cross_build_platform_list="$dist_build_target_arch"
#[ -n "$make_cross_build_platform_list" ] || make_cross_build_platform_list="i386 amd64"
export make_cross_build_platform_list

[ -n "$dist_build_file_system" ] || dist_build_file_system="ext4"

dist_build_debopt+=" --verbose "

dist_build_debopt+=" --include="
for grml_package in $(grep --invert-match "#" "$source_code_folder_dist/grml_packages") ; do
   if [ "locales" = "$grml_package" ]; then
      ## XXX: Workaround for:
      ## https://github.com/grml/grml-debootstrap/issues/48
      continue
   fi
   dist_build_debopt+="$grml_package"
   dist_build_debopt+=","
done
## Remove trailing ','.
dist_build_debopt="${dist_build_debopt::-1}"

## cowbuilder (which internally uses pbuilder).
dist_build_pbuilder_chroot_script="$dist_source_help_steps_folder/pbuilder-chroot-script"

dist_build_pbuilder_config_name="pbuilder.conf"
dist_build_pbuilder_config_file="$binary_build_folder_dist/$dist_build_pbuilder_config_name"
export dist_build_pbuilder_config_name
## export so it can be read by genmkfile
export dist_build_pbuilder_config_file

make_cowbuilder_dist_folder="$binary_build_folder_dist/genmkfile-packages-result"

rm --force "$dist_build_pbuilder_config_file"
sudo $SUDO_OPTS mkdir --parents "$binary_build_folder_dist/"
sudo $SUDO_OPTS mkdir --parents "$make_cowbuilder_dist_folder"

echo "\
## This is an auto generated file.
## Auto generated by $dist_source_help_steps_folder/$BASH_SOURCE.
## Edits will be lost!

## Debugging.
#set -x

APTGETOPT[\${#APTGETOPT[@]}]=\"${APTGETOPT[@]}\"

APTGETOPT[\${#APTGETOPT[@]}]=\"-o Acquire::BlockDotOnion=false\"

export dist_aptgetopt_file

## making pbuilder /usr/lib/pbuilder/pbuilder-createbuildenv work with mmdebstrap.
## so it can be read by help-steps/pbuilder-debootstrap-command-filter
export BUILDPLACE

## Debugging.
true \"APTGETOPT: \${APTGETOPT[@]}\"
true \"BUILDPLACE: \$BUILDPLACE\"
true \"dist_aptgetopt_file: \$dist_aptgetopt_file\"

APTCACHEHARDLINK=no

## E: Cross building is possible only with the APT dependency resolver
PBUILDERSATISFYDEPENDSCMD=/usr/lib/pbuilder/pbuilder-satisfydepends-apt

## End of $dist_build_pbuilder_config_file.
" | \
   sudo $SUDO_OPTS tee "$dist_build_pbuilder_config_file" >/dev/null

#sudo $SUDO_OPTS cat "$dist_build_pbuilder_config_file"

## Cannot export bash array.
export APTGETOPT

export APTGETOPT_ALT

## It depends on the order in which tb-updater is installed if
## update-torbrowser should or should not use temporarily reset
## anon-ws-dnf-conf.
tb_disable_anon_ws_dnf_conf=false
export tb_disable_anon_ws_dnf_conf

## {{{ SKIP_SCRIPTS

## Would be nicer to have this in the 'pre' script, but the 'variables' script
## runs after 'pre' to provide pretty color functions.
own_filename="$(basename "$0")"
for skip_script in $SKIP_SCRIPTS; do
   if [ "$own_filename" = "$skip_script" ]; then
      unset skip_script
      echo "${bold}${green}INFO: Skipping $own_filename, because SKIP_SCRIPTS includes it. ${reset}"
      exit 0
   fi
done
unset skip_script

## }}}

set -x

true "${bold}INFO: Currently running script: $0 "$@"${reset}"
true "INFO: LD_PRELOAD: $LD_PRELOAD"
