#!/bin/bash

## Copyright (C) 2019 - 2022 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x

set -e

true "$0: start"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

## travis.debian.net does not pass the CI environment variable to docker.
## build script reads CI variable.
if echo "$PWD" | grep -q travis ; then
   true "INFO: travis detected, ok."
elif [ ! "$CI" = "true" ]; then
   true "ERROR: You probably do not want to run this outside of a CI \
environment, because it uses virsh to undefine virtual machines."
   exit 1
fi

export CI=true

sudo --non-interactive apt-get update

## Sanity tests.
sudo --non-interactive dpkg --configure -a

## Highest Ubuntu version offered by Travis CI is Ubuntu "bionic" but
## mmdebstrap is only available since Ubuntu "disco".

## mmdebstrap dependencies: perl perl-doc

sudo --non-interactive apt-get --yes install perl perl-doc apt-cacher-ng apt-transport-https apt-transport-tor ca-certificates tor

echo 'PassThroughPattern: .*' | sudo --non-interactive tee /etc/apt-cacher-ng/zz_debconf.conf >/dev/null
cat /etc/apt-cacher-ng/zz_debconf.conf
sudo --non-interactive systemctl restart apt-cacher-ng || true
sudo --non-interactive systemctl status apt-cacher-ng || true

sudo --non-interactive systemctl status tor || true
sudo --non-interactive systemctl status tor@default || true

wget http://mirrors.kernel.org/ubuntu/pool/universe/m/mmdebstrap/mmdebstrap_0.4.1-6_all.deb
sudo --non-interactive dpkg -i mmdebstrap_0.4.1-6_all.deb

sudo --non-interactive apt-get --yes install mmdebstrap

## debian-archive-keyring: required so mmdebstrap gets key for packages.debian.org.
wget http://http.us.debian.org/debian/pool/main/d/debian-archive-keyring/debian-archive-keyring_2019.1+deb10u1_all.deb
sudo --non-interactive dpkg -i debian-archive-keyring_2019.1+deb10u1_all.deb

sudo --non-interactive \
   codename="bullseye-developers" \
   ./packages/kicksecure/usability-misc/usr/bin/repo-add-dist

mmdebstrap_wrapper=./help-steps/mmdebstrap

test -f "$mmdebstrap_wrapper"
test -x "$mmdebstrap_wrapper"

mkdir -p ~/chroot

####

repo=bullseye-developers
path_to_temp_sources_list=~/temp-sources.list

####

echo "
deb http://HTTPS///deb.debian.org/debian-security bullseye-security main contrib non-free
deb http://HTTPS///deb.debian.org/debian bullseye main contrib non-free
deb http://HTTPS///deb.whonix.org $repo main contrib non-free
" > "$path_to_temp_sources_list"

#### many tests with apt-cacher-ng Non-Qubes-Whonix

pkg_to_test_list="
whonix-host-xfce-kvm-nonfreedom

kicksecure-cli-vm
kicksecure-xfce
kicksecure-xfce-vm

non-qubes-whonix-gateway-xfce
non-qubes-whonix-workstation-xfce
"

## TODO: investigate tb-updater failure
## anon_shared_inst_tb=open

## https://git-tails.immerda.ch/tails/tree/config/chroot_local-preseed/firmware

for pkg_to_test_item in $pkg_to_test_list ; do
   path_to_chroot=~/"chroot/${pkg_to_test_item}"

   sudo --non-interactive \
      DEBDEBUG=1 \
      SOURCE_DATE_EPOCH="1548374400" \
      SECURITY_MISC_INSTALL=force \
      DERIVATIVE_APT_REPOSITORY_OPTS="--enable --codename $repo" \
      anon_shared_inst_tb=open \
      "$mmdebstrap_wrapper" \
      --verbose \
      --variant=required \
      --aptopt='Acquire::http { Proxy "http://127.0.0.1:3142"; }' \
      --aptopt='Acquire::https { Proxy "http://127.0.0.1:3142"; }' \
      --aptopt='Acquire::tor { Proxy "http://127.0.0.1:3142"; }' \
      --essential-hook='echo b43-fwcutter b43-fwcutter/cut_firmware boolean true | chroot "$1" debconf-set-selections' \
      --essential-hook='echo firmware-ipw2x00 firmware-ipw2x00/license/accepted boolean true | chroot "$1" debconf-set-selections' \
      --essential-hook='echo firmware-iwlwifi firmware-iwlwifi/license/accepted boolean true | chroot "$1" debconf-set-selections' \
      --essential-hook='echo firmware-ralink firmware-ralink/license/accepted boolean true | chroot "$1" debconf-set-selections' \
      --include "$pkg_to_test_item" \
      bullseye \
      "$path_to_chroot" \
      "$path_to_temp_sources_list"

   ls "$path_to_chroot"
   ls "$path_to_chroot/home"

   ## Safe disk space.
   sudo --non-interactive \
      rm --recursive --force "$path_to_chroot"
done

#### many tests with apt-cacher-ng Qubes-Whonix

wget https://keys.qubes-os.org/keys/qubes-release-4-debian-signing-key.asc

sudo --non-interactive \
   apt-key --keyring /etc/apt/trusted.gpg.d/qubes.gpg add qubes-release-4-debian-signing-key.asc

echo "
# Qubes updates candidates repository
deb [arch=amd64] http://HTTPS///deb.qubes-os.org/r4.0/vm bullseye-testing main

# Qubes security updates testing repository
deb [arch=amd64] http://HTTPS///deb.qubes-os.org/r4.0/vm bullseye-securitytesting main
" >> "$path_to_temp_sources_list"

cat "$path_to_temp_sources_list"

pkg_to_test_list="
qubes-whonix-gateway
qubes-whonix-workstation
"

for pkg_to_test_item in $pkg_to_test_list ; do
   path_to_chroot=~/"chroot/${pkg_to_test_item}"

   sudo --non-interactive \
      DEBDEBUG=1 \
      SOURCE_DATE_EPOCH="1548374400" \
      SECURITY_MISC_INSTALL=force \
      DERIVATIVE_APT_REPOSITORY_OPTS="--enable --codename $repo" \
      anon_shared_inst_tb=open \
      "$mmdebstrap_wrapper" \
      --verbose \
      --debug \
      --variant=required \
      --aptopt='Dpkg::Options { "--force-confnew"};' \
      --aptopt='Acquire::http { Proxy "http://127.0.0.1:3142"; }' \
      --aptopt='Acquire::https { Proxy "http://127.0.0.1:3142"; }' \
      --aptopt='Acquire::tor { Proxy "http://127.0.0.1:3142"; }' \
      --include "$pkg_to_test_item" \
      bullseye \
      "$path_to_chroot" \
      "$path_to_temp_sources_list"

   ls "$path_to_chroot"
   ls "$path_to_chroot/home"

   ## Safe disk space.
   sudo --non-interactive rm --recursive --force "$path_to_chroot"
done

true "$0 INFO: OK. End."
