#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -o errexit
set -o errtrace
set -o pipefail

true "INFO: Currently running script: ${BASH_SOURCE[0]} $*"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"

dist_build_internal_run="true"
dist_build_one_parsed="true"

source ./help-steps/pre
source ./help-steps/colors
source ./help-steps/variables

error_handler_dist_build_one() {
   true "${red}${bold}ERROR in $0${reset}"
   true "${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND"
   true "${red}\$@: $*${reset}"
   true "${red}${bold}INFO: Now exiting from $0 (because error was detected, see above).${reset}"
   exit 1
}

trap "error_handler_dist_build_one" ERR

print_usage() {
  echo "\
derivative-update

Syntax:
  (-t|--tag|-r|--ref ref) [-p|--preserve-uncommitted] [-u|--remote-update]

Description:
  Updates the derivative-maker repository to the specified ref in a secure
  fashion. Imports the derivative-maker signing keys if they are not already
  imported into GPG. Can fetch new commits and refs from the remote repository
  if desirable.

Parameters:
  -t|--tag                   : Check out the specified tag. Specify 'latest'
                               to check out the most recently created tag in
                               the repository.
  -r|--ref                   : Check out the specified (branch or commit).
  -p|--preserve-uncommitted  : Stash uncommitted changes before updating,
                               then restore them after the update.
  -f|--force                 : Do not prompt for confirmation before fetching
                               remote refs or discarding or attempting to
                               preserve uncommitted changes. This does NOT
                               override signature checks.
"
}

query_user() {
  local query reply

  query="${1:-}"
  [ -z "${query}" ] && error "No query given to 'query_user'!"

  if [ "$dist_build_non_interactive" = "true" ]; then
    error "Interactive question but non-interactive mode detected. (dist_build_non_interactive=true) Use: --force"
  fi

  printf '%s\n' "${query}"

  read -r reply
  if [ "${reply,,}" = 'y' ]; then
    return 0
  fi
  return 1
}

confirm_remote_update() {
  query_user "\
NOTICE:

You have requested to update the repository with code from the default remote
repository. Are you sure you want to do this? [Y/N]
"
}

confirm_stash_uncommitted() {
  query_user "\
NOTICE:

You have uncommitted changes and have requested to preserve them.
derivative-update will stash your changes, check out the requested
ref, then restore them. Are you sure you want to do this? [Y/N]
"
}

import_keys() {
  local key_index derivative_signing_key_fingerprint_list derivative_signing_public_key_item derivative_signing_key_fingerprint_item

  for key_index in "${!derivative_signing_public_key_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group_list[key_index]}"
    derivative_signing_public_key_item="${derivative_signing_public_key_list[key_index]}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if gpg --quiet --list-keys -- "${derivative_signing_key_fingerprint_item}" &>/dev/null; then
        true "INFO: key already imported."
      else
        true "INFO: key not yet already imported. Importing..."
        gpg --keyid-format long --import --import-options show-only --with-fingerprint -- "${derivative_signing_public_key_item}"
        gpg --import -- "${derivative_signing_public_key_item}"
        gpg --check-sigs -- "${derivative_signing_key_fingerprint_item}"
        break
      fi
    done
  done
}

signed_by_fingerprint() {
  local fingerprint derivative_signing_key_fingerprint_group derivative_signing_key_fingerprint_item derivative_signing_key_fingerprint_list

  ## NOTE: Cannot use end-of-options ("--").
  fingerprint=$(git show --no-patch --pretty="format:%GF" "${1}")

  for derivative_signing_key_fingerprint_group in "${derivative_signing_key_fingerprint_group_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if [ "${fingerprint}" = "${derivative_signing_key_fingerprint_item}" ]; then
        true "INFO: fingerprint match, ok."
        return 0
      fi
    done
  done

  1>&2 printf '%s\n' "Signing key fingerprint does not match!"
  return 1
}

verify_ref() {
  local ref ref_type

  ref="${1:-}"
  ref_type="${2:-}"

  if [ -z "${ref}" ]; then
    error 'Cannot pass empty ref to verify_ref!'
  fi
  if [ -z "${ref_type}" ]; then
    error 'Cannot pass empty ref_type to verify_ref!'
  fi
  case "${ref_type}" in
    tag|commit)
      true "INFO: ref_type: tag or commit."
      ;;
    *)
      error "ref_type must be one of 'tag' or 'commit'!"
      ;;
  esac

  ## Policy: All git commits (at least HEAD) is always signed.
  git verify-commit -- "${ref}^{commit}" || return 1
  signed_by_fingerprint "${ref}^{commit}" || return 1

  if [ "${ref_type}" = 'tag' ]; then
    ## Policy: All git tags are always signed.
    git verify-tag -- "${ref}" || return 1
    signed_by_fingerprint "${ref}" || return 1
  fi
}

abort_update() {
  local error_msg did_stash_changes recover_ref branch_reset_ref

  error_msg="${1:-}"
  did_stash_changes="${2:-}"
  recover_ref="${3:-}"
  branch_reset_ref="${4:-}"

  if [ -z "${error_msg}" ]; then
    error 'no error_msg variable provided to abort_update!'
  fi
  if [ -z "${did_stash_changes}" ]; then
    error 'no did_stash_changes variable provided to abort_update!'
  fi

  if [ -n "${recover_ref}" ]; then
    if [ -z "${branch_reset_ref}" ]; then
      error 'in abort_update, recover_ref was passed, but branch_reset_ref was not!'
    fi

    ## Cannot use 'error' here because we want to use the 'error' below.
    ## NOTE: Cannot use end-of-options ("--").
    git reset --hard --recurse-submodules "${branch_reset_ref}" || true "ERROR: 'git reset --hard --recurse-submodules' failed."
    ## NOTE: Cannot use end-of-options ("--").
    git checkout --recurse-submodules "${recover_ref}" || true "ERROR: 'git checkout --recurse-submodules' failed."
  fi

  if [ "${did_stash_changes}" = 'true' ]; then
    did_stash_changes=""
    ## Cannot use 'error' here because we want to use the 'error' below.
    git stash pop || true 'ERROR: git stash pop - failed!'
  fi

  error "${error_msg}"
}

update_repo() {
  local target_tag target_ref do_preserve_uncommitted \
    do_force orig_ref did_stash_changes branch_reset_ref current_branch \
    upstream_branch submodule_path_list git_status_str submodule_path

  target_tag=""
  target_ref=""
  do_preserve_uncommitted='false'
  do_force='false'
  orig_ref=""
  did_stash_changes='false'

  ## Note, short and combined options such as '-tpu' are unsupported and not planned.
  while (( $# > 0 )); do
    case "$1" in
      -t|--tag)
        target_tag="$2"
        shift 2
        ;;
      -r|--ref)
        target_ref="$2"
        shift 2
        ;;
      -p|--preserve-uncommitted)
        do_preserve_uncommitted='true'
        shift
        ;;
      -f|--force)
        do_force='true'
        shift
        ;;
      *)
        error "Unrecognized option '$1'!"
        ;;
    esac
  done

  if [ -z "${target_tag}" ] && [ -z "${target_ref}" ]; then
    error 'You did not tell me what to check out.
           * Use --tag <tag>   to move to a signed tag, e.g. --tag 17.4.1.9-developers-only
           * Or  --ref <name>  for a branch or commit, e.g.  --ref master
           --help for the full syntax.'
  fi
  if [ -n "${target_tag}" ] && [ -n "${target_ref}" ]; then
    error 'Options --tag and --ref are mutually exclusive.
           Choose exactly one of them; for example:
           derivative-update --tag 17.4.1.9-developers-only
           derivative-update --ref master'
  fi

  ## Get the ref (branch or commit) that we're currently at.
  ## NOTE: Cannot use end-of-options ("--").
  orig_ref="$(git rev-parse HEAD)" || error 'Cannot get head commit ID!'

  ## Import any additional needed GPG keys.
  import_keys

  ## Sanity-check; verify the signature of the current ref. If the user has
  ## never verified the repo before, this can be bypassed if the repo is
  ## compromised, but if the repo is safe, this (in combination with the key
  ## import above) will do the initial verification, providing "trust on first
  ## use" (TOFU) security.
  verify_ref "${orig_ref}" 'commit'

  if ! test -f '.gitmodules' ; then
    error "Missing '.gitmodules' file."
  fi

  ## "Get rid of" uncommitted changes, we need there to be no uncommitted
  ## changes in order to robustly verify the repository state. How we do this
  ## depends on the options we were passed:
  ##
  ## * If there aren't uncommitted changes, continue onwards.
  ## * If do_preserve_uncommitted is false and do_force is false, bail.
  ## * If do_preserve_uncommitted is false and do_force is true, hard-reset
  ##   the changes away.
  ## * If do_preserve_uncommitted is true and do_force is false, ask the user
  ##   before stashing changes and either bail or stash depending on their
  ##   response.
  ## * If do_preserve_uncommitted is true and do_force is true, stash without
  ##   confirmation.
  ## * If a stash or hard-reset fails to get rid of all uncommitted changes
  ##   (because of uncommitted changes in a submodule), bail.
  git_status_str="$(git status --porcelain=v1 2>&1)" || error "'git status --porcelain=v1' failed."
  if [ -n "${git_status_str}" ]; then
    ## Check submodules for uncommitted changes first. 'git reset' and 'git
    ## stash' won't remove those changes, so if a submodule has uncommitted
    ## changes we need to bail now.
    readarray -t submodule_path_list < <(
      grep 'path =' .gitmodules | awk '{ print $3 }'
    )
    for submodule_path in "${submodule_path_list[@]}"; do
      # shellcheck disable=SC2076
      if [[ "${git_status_str}" =~ "${submodule_path}" ]]; then
        error "Uncommitted changes detected in submodule '${submodule_path}'! Please commit or discard them before updating."
      fi
    done

    if [ "${do_preserve_uncommitted}" = 'false' ] && [ "${do_force}" = 'false' ]; then
      error 'Uncommitted changes are present, and --preserve-uncommitted was not passed!'
    elif [ "${do_preserve_uncommitted}" = 'false' ] && [ "${do_force}" = 'true' ]; then
      ## NOTE: Cannot use end-of-options ("--").
      git reset --hard HEAD || error "'git reset --hard HEAD' failed."
    elif [ "${do_preserve_uncommitted}" = 'true' ] && [ "${do_force}" = 'false' ]; then
      confirm_stash_uncommitted || error 'User declined stashing uncommitted changes!'
      git stash || error "'git stash' failed."
      did_stash_changes='true'
    elif [ "${do_preserve_uncommitted}" = 'true' ] && [ "${do_force}" = 'true' ]; then
      git stash || error "'git stash' failed."
      did_stash_changes='true'
    else
      error 'Unknown condition bug.'
    fi
    if [ -n "$(git status --porcelain=v1 2>&1)" ]; then
      error 'Failed to get rid of uncommitted changes, was a git submodule modified?'
    fi
  fi

  if [ -n "$(git status --porcelain=v1 2>&1)" ]; then
    error 'Unexpected uncommitted changes bug.'
  fi

  git fetch --recurse-submodules --jobs=100 || error 'Failed to fetch from remote!'

  ## If we were asked to check out the 'latest' tag, find the latest tag.
  if [ "${target_tag}" = 'latest' ]; then
    latest_tag_commit="$(git rev-list --tags --max-count=1)" || error 'Failed to find latest tag commit.'
    [[ -z "$latest_tag_commit" ]] && error 'No tags found.'
    target_tag="$(git describe --tags -- "$latest_tag_commit")" || error 'Failed to find latest git tag.'
  fi

  ## Verify the specified ref, then check out that ref.
  if [ -n "${target_tag}" ]; then
    if ! verify_ref "${target_tag}" 'tag'; then
      abort_update 'Tag verification failed!' "${did_stash_changes}"
    fi

    ## NOTE: Cannot use end-of-options ("--").
    git checkout --recurse-submodules "${target_tag}" || error "'git checkout --recurse-submodules' failed."
  elif [ -n "${target_ref}" ]; then
    if ! verify_ref "${target_ref}" 'commit'; then
      abort_update 'Ref verification failed!' "${did_stash_changes}"
    fi

    ## NOTE: Cannot use end-of-options ("--").
    git checkout --recurse-submodules "${target_ref}" || error "'git checkout --recurse-submodules' failed."

    git show-ref --verify -- "refs/heads/${target_ref}" || error "'git show-ref --verify' failed."
  fi

  ## The specified ref is a branch, and the user asked us to update from
  ## the remote repository, meaning the user is trying to update to the
  ## latest commit of the specified branch.
  ##
  ## Merge the branch with its remote (which we fetched earlier), then
  ## re-verify the branch. If it flunks verification, try to fix
  ## the local branch, then revert to the original ref.
  ##
  ## Note that we make a best-effort attempt to get the local branch
  ## back to a known-good state in the event the branch flunks
  ## verification. If that attempt fails, we ignore the failure since
  ## it's important to get the working tree back into a known-good state
  ## if at all possible. Thus it is possible that failed verification
  ## during a branch update could lead to a compromised local branch.

  ## Save the ref first so we can undo the merge if it goes wrong.
  ## NOTE: Cannot use end-of-options ("--").
  branch_reset_ref="$(git rev-parse HEAD)" || error 'Cannot get head commit ID!'

  ## Do merge and verify.
  ## If any of the steps involved fail, trigger a rollback.
  current_branch="$(git symbolic-ref -q -- HEAD)" \
    || abort_update \
      'Getting current branch name failed!' \
      "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"

  upstream_branch="$(git for-each-ref --format='%(upstream:short)' "$current_branch")" \
    || abort_update \
      'Getting upstream branch name failed!' \
      "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"

  if [ -n "${target_tag}" ]; then
    true "Special code path unnecessary for git tag."
  elif [ -n "${target_ref}" ]; then
    git merge --ff-only "$upstream_branch" \
      || abort_update \
        'Merge from remote failed!' \
        "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"

    verify_ref "${target_ref}" 'commit' \
      || abort_update \
        'Remote commit verification failed! You are now in detached HEAD state, you will need to check out a branch you trust manually.' \
        "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"
  fi

  ## Safe.
  ## Ensures submodules' remote URL configuration matches the values specified in .gitmodules.
  git submodule sync --recursive || error "'git submodule sync --recursive' failed."

  ## Caution.
  ## This command updates Git submodules to the commit recorded in the parent repository. (derivative-maker)
  ## It modifies the submodule's Git HEAD, potentially overriding local changes.
  git -c merge.verifySignatures=true submodule update --init --recursive --jobs=200 --merge \
    || abort_update \
      'Submodule update failed!' \
      "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"

  if [ -n "${target_tag}" ]; then
    verify_ref "${target_ref}" 'tag' \
      || abort_update \
        'Verification failed after submodule update!' \
        "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"
  elif [ -n "${target_ref}" ]; then
    verify_ref "${target_ref}" 'commit' \
      || abort_update \
        'Verification failed after submodule update!' \
        "${did_stash_changes}" "${orig_ref}" "${branch_reset_ref}"
  fi

  if [ -n "$(git status --porcelain=v1 2>&1)" ]; then
    error 'Unexpected uncommitted changes after checkout.'
  fi

  if [ "${did_stash_changes}" = 'true' ]; then
    did_stash_changes=""
    git stash pop || error 'git stash pop - failed!'
  fi

  ## Done.
  true
}

main() {
  if [ "$1" = "--help" ]; then
    print_usage
    exit 0
  fi

  if [ "$(id -u)" = "0" ]; then
    true "${red}${bold}ERROR: This must NOT be run as root (sudo)!${reset}"
    exit 1
  fi
  true "INFO: Script running as as non-root, ok."

  update_repo "$@"
}

main "$@"
