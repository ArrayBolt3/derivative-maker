#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -o errexit
set -o errtrace
set -o pipefail

true "INFO: Currently running script: ${BASH_SOURCE[0]} $*"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"

dist_build_internal_run="true"
dist_build_one_parsed="true"

source ./help-steps/pre
source ./help-steps/colors
source ./help-steps/variables

error_handler_dist_build_one() {
   true "${red}${bold}ERROR in $0${reset}"
   true "${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND"
   true "${red}\$@: $*${reset}"
   true "${red}${bold}INFO: Now exiting from $0 (because error was detected, see above).${reset}"
   exit 1
}

trap "error_handler_dist_build_one" ERR

print_usage() {
  printf '%s\n' "\
derivative-update

Syntax:
  (-t|--tag|-r|--ref ref)

Description:
  Updates the derivative-maker repository to the specified ref in a secure
  fashion. Imports the derivative-maker signing keys if they are not already
  imported into GPG. Fetches new commits and refs from the remote repository.

Parameters:
  -t|--tag                   : Check out the specified tag. Specify 'latest'
                               to check out the most recently created tag in
                               the repository.
  -r|--ref                   : Check out the specified branch.
"
}

import_keys() {
  local key_index derivative_signing_key_fingerprint_list derivative_signing_public_key_item derivative_signing_key_fingerprint_item

  for key_index in "${!derivative_signing_public_key_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group_list[key_index]}"
    derivative_signing_public_key_item="${derivative_signing_public_key_list[key_index]}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if gpg --quiet --list-keys -- "${derivative_signing_key_fingerprint_item}" &>/dev/null; then
        true "INFO: key already imported."
      else
        true "INFO: key not yet already imported. Importing..."
        gpg --keyid-format long --import --import-options show-only --with-fingerprint -- "${derivative_signing_public_key_item}"
        gpg --import -- "${derivative_signing_public_key_item}"
        gpg --check-sigs -- "${derivative_signing_key_fingerprint_item}"
        break
      fi
    done
  done
}

signed_by_fingerprint() {
  local fingerprint derivative_signing_key_fingerprint_group derivative_signing_key_fingerprint_item derivative_signing_key_fingerprint_list

  ## NOTE: Cannot use end-of-options ("--").
  ##
  ## NOTE: 'tail -n-1' is mandatory, otherwise verifying the fingerprint of a
  ## a tag will fail.
  fingerprint=$(git show --no-patch --pretty="format:%GF" "${1}" | tail -n -1)

  for derivative_signing_key_fingerprint_group in "${derivative_signing_key_fingerprint_group_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if [ "${fingerprint}" = "${derivative_signing_key_fingerprint_item}" ]; then
        true "INFO: fingerprint match, ok."
        return 0
      fi
    done
  done

  1>&2 printf '%s\n' "Signing key fingerprint does not match!"
  return 1
}

verify_ref() {
  local ref ref_type

  ref="${1:-}"
  ref_type="${2:-}"

  if [ -z "${ref}" ]; then
    error 'Cannot pass empty ref to verify_ref!'
  fi
  if [ -z "${ref_type}" ]; then
    error 'Cannot pass empty ref_type to verify_ref!'
  fi
  case "${ref_type}" in
    tag|commit)
      true "INFO: ref_type: tag or commit."
      ;;
    *)
      error "ref_type must be one of 'tag' or 'commit'!"
      ;;
  esac

  ## Policy: All git commits (at least HEAD) is always signed.
  git verify-commit -- "${ref}^{commit}" || return 1
  signed_by_fingerprint "${ref}^{commit}" || return 1

  if [ "${ref_type}" = 'tag' ]; then
    ## Policy: All git tags are always signed.
    ##
    ## NOTE: 'refs/tags/' is necessary to prevent ambiguity in the event of a
    ## tag with the same name as a branch or commit.
    git verify-tag -- "refs/tags/${ref}" || return 1
    signed_by_fingerprint "${ref}" || return 1
  fi
}

abort_update() {
  local error_msg recover_commit branch_reset_commit

  error_msg="${1:-}"
  recover_commit="${2:-}"
  branch_reset_commit="${3:-}"

  if [ -z "${error_msg}" ]; then
    error 'no error_msg variable provided to abort_update!'
  fi

  if [ -n "${recover_commit}" ]; then
    if [ -n "${branch_reset_commit}" ]; then
      ## Cannot use 'error' here because we want to use the 'error' below.
      ## NOTE: Cannot use end-of-options ("--").
      git reset --hard --recurse-submodules "${branch_reset_commit}" || true "ERROR: 'git reset --hard --recurse-submodules' failed."
    fi

    ## NOTE: Cannot use end-of-options ("--").
    git checkout --recurse-submodules "${recover_commit}" || true "ERROR: 'git checkout --recurse-submodules' failed."
  fi

  error "${error_msg}"
}

update_repo() {
  local target_tag target_ref orig_commit branch_reset_commit current_branch \
    upstream_branch submodule_path_list git_status_str submodule_path_item

  target_tag=""
  target_ref=""
  orig_commit=""

  ## Note, short and combined options such as '-tpu' are unsupported and not planned.
  while (( $# > 0 )); do
    case "$1" in
      -t|--tag)
        target_tag="$2"
        shift 2
        ;;
      -r|--ref)
        target_ref="$2"
        shift 2
        ;;
      *)
        error "Unrecognized option '$1'!"
        ;;
    esac
  done

  if [ -z "${target_tag}" ] && [ -z "${target_ref}" ]; then
    error 'You did not tell me what to check out.
           * Use --tag <tag>   to move to a signed tag, e.g. --tag 17.4.1.9-developers-only
           * Or  --tag latest  to move to the latest signed tag
           * Or  --ref <name>  for a branch or commit, e.g.  --ref master
           --help for the full syntax.'
  fi
  if [ -n "${target_tag}" ] && [ -n "${target_ref}" ]; then
    error 'Options --tag and --ref are mutually exclusive.
           Choose exactly one of them; for example:
           derivative-update --tag 17.4.1.9-developers-only
           derivative-update --ref master'
  fi

  ## Get the ref (branch or commit) that we're currently at.
  ## NOTE: Cannot use end-of-options ("--").
  orig_commit="$(git rev-parse HEAD)" || error 'Cannot get head commit ID!'

  ## Import any additional needed GPG keys.
  import_keys

  ## Sanity-check; verify the signature of the current ref. If the user has
  ## never verified the repo before, this can be bypassed if the repo is
  ## compromised, but if the repo is safe, this (in combination with the key
  ## import above) will do the initial verification, providing "trust on first
  ## use" (TOFU) security.
  verify_ref "${orig_commit}" 'commit'

  if ! test -f '.gitmodules' ; then
    error "Missing '.gitmodules' file."
  fi

  ## We need there to be no uncommitted changes in order to robustly verify the repository state.
  ## If there are uncommitted changes, stop.
  git_status_str="$(git status --porcelain=v1 2>&1)" || error "'git status --porcelain=v1' failed."
  if [ -n "${git_status_str}" ]; then
    ## Check submodules for uncommitted changes first.
    readarray -t submodule_path_list < <(
      grep --fixed-strings 'path =' -- '.gitmodules' | awk -- '{ print $3 }'
    )
    for submodule_path_item in "${submodule_path_list[@]}"; do
      ## grep would be better in so far that it supports '--fixed-strings'.
      ## In the worst case, special characters might cause a spurious error message.
      ## Hence, preferring speed (bash built-in string matching) over external utility 'grep'.
      #if grep --fixed-strings -- "$submodule_path_item" &>/dev/null <<< "$git_status_str"; then
      # shellcheck disable=SC2076
      if [[ "${git_status_str}" =~ "${submodule_path_item}" ]]; then
        printf '%s\n' "${red}${bold}ERROR: Uncommitted changes detected in git submodule '${submodule_path_item}'! Please commit or discard them before updating.${reset}"
      fi
    done

    error "Uncommitted changes detected in derivative-maker source code folder! Please commit or discard them before updating."
  fi

  ## Fetch new code from remote.
  git fetch --recurse-submodules --jobs=100 || error 'Failed to fetch from remote!'

  ## If we were asked to check out the 'latest' tag, find the latest tag.
  if [ "${target_tag}" = 'latest' ]; then
    latest_tag_commit="$(git rev-list --tags --max-count=1)" || error 'Failed to find latest tag commit.'
    [[ -z "$latest_tag_commit" ]] && error 'No tags found.'
    target_tag="$(git describe --tags -- "$latest_tag_commit")" || error 'Failed to find latest git tag.'
  fi

  ## Verify the specified ref, then check out that ref.
  if [ -n "${target_tag}" ]; then
    if ! verify_ref "${target_tag}" 'tag'; then
      abort_update 'Tag verification failed!'
    fi

    ## NOTE: Cannot use end-of-options ("--").
    ##
    ## NOTE: 'refs/tags/' is necessary to prevent ambiguity in the event of a
    ## tag with the same name as a branch.
    git checkout --recurse-submodules "refs/tags/${target_tag}" || abort_update 'Tag checkout failed!'

  elif [ -n "${target_ref}" ]; then
    if ! verify_ref "${target_ref}" 'commit'; then
      abort_update 'Ref verification failed!'
    fi

    ## NOTE: Cannot use end-of-options ("--").
    ##
    ## NOTE: 'git checkout' will prefer branch or commit IDs over tags when
    ## not using 'refs/tags/'.
    git checkout --recurse-submodules "${target_ref}" || abort_update 'Ref checkout failed!'

    ## Check if the given target_ref is a local branch name.
    if git show-ref --verify -- "refs/heads/${target_ref}"; then
      ## The specified ref is a branch, meaning the user is trying to update
      ## to the latest commit of the specified branch.
      ##
      ## Merge the branch with its remote (which we fetched earlier), then
      ## re-verify the branch. If it flunks verification, try to fix
      ## the local branch, then revert to the original ref.
      ##
      ## Note that we make a best-effort attempt to get the local branch
      ## back to a known-good state in the event the branch flunks
      ## verification. If that attempt fails, we ignore the failure since
      ## it's important to get the working tree back into a known-good state
      ## if at all possible. Thus it is possible that failed verification
      ## during a branch update could lead to a compromised local branch.
      ##
      ## Save the ref first so we can undo the merge if it goes wrong.
      ## NOTE: Cannot use end-of-options ("--").
      branch_reset_commit="$(git rev-parse HEAD)" || error 'Cannot get head commit ID!'
      ## Safe.
      ## Ensures submodules' remote URL configuration matches the values specified in '.gitmodules'.
      git submodule sync --recursive || error "'git submodule sync --recursive' failed."
      ## TODO: 'git symbolic-ref -q -- HEAD' will fail if we previously did 'git checkout tag-name'.
      ##       (Because of detached HEAD.)
      ## Do merge and verify.
      ## If any of the steps involved fail, trigger a rollback.
      current_branch="$(git symbolic-ref -q -- HEAD)" \
        || abort_update \
          'Getting current branch name failed!' \
          "${orig_commit}" "${branch_reset_commit}"
      upstream_branch="$(git for-each-ref --format='%(upstream:short)' "$current_branch")" \
        || abort_update \
          'Getting upstream branch name failed!' \
          "${orig_commit}" "${branch_reset_commit}"
      git merge --ff-only "$upstream_branch" \
        || abort_update \
          'Merge from remote failed!' \
          "${orig_commit}" "${branch_reset_commit}"
      verify_ref "${target_ref}" 'commit' \
        || abort_update \
          'Remote commit verification failed! You are now in detached HEAD state, you will need to check out a branch you trust manually.' \
          "${orig_commit}" "${branch_reset_commit}"
      ## Caution.
      ## This command updates Git submodules to the commit recorded in the parent repository. (derivative-maker)
      ## It modifies the submodule's Git HEAD, potentially overriding local changes.
      git -c merge.verifySignatures=true submodule update --init --recursive --jobs=200 --merge \
        || abort_update \
          'Submodule update failed!' \
          "${orig_commit}" "${branch_reset_commit}"
      verify_ref "${target_ref}" 'commit' \
        || abort_update \
          'Verification failed after submodule update!' \
          "${orig_commit}" "${branch_reset_commit}"
    fi
  fi

  if [ -n "$(git status --porcelain=v1 2>&1)" ]; then
    error 'Unexpected uncommitted changes after checkout.'
  fi

  true "INFO: Success."
}

main() {
  if [ "$1" = "--help" ]; then
    print_usage
    exit 0
  fi

  if [ "$(id -u)" = "0" ]; then
    true "${red}${bold}ERROR: This must NOT be run as root (sudo)!${reset}"
    exit 1
  fi
  true "INFO: Script running as as non-root, ok."

  update_repo "$@"
}

main "$@"
