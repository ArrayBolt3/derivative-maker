#!/bin/bash

## Copyright (C) 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

make-live-build-use-mmdebstrap() {
   $SUDO_TO_ROOT cp --no-clobber --verbose /usr/sbin/debootstrap /usr/sbin/debootstrap-backup
   ## live-build: support configuration of debootstrap binary
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1031929
   ## Functional.
   #$SUDO_TO_ROOT cp --verbose "$dist_source_help_steps_folder/pbuilder-debootstrap-command-filter" /usr/sbin/debootstrap
   ## Test.
   if test -f /usr/sbin/debootstrap ; then
      $SUDO_TO_ROOT rm --verbose --force /usr/sbin/debootstrap
   fi
   if test -h /usr/sbin/debootstrap ; then
      $SUDO_TO_ROOT unlink /usr/sbin/debootstrap
   fi
   $SUDO_TO_ROOT ln -s "$dist_source_help_steps_folder/pbuilder-debootstrap-command-filter" /usr/sbin/debootstrap
   ## Debugging.
   ls -la /usr/sbin/debootstrap
}

etc-mtab-workaround() {
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1032408
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1040928

   local search replace file_name

   search='if ! Chroot chroot "test -s /etc/mtab"'
   replace='if ! Chroot chroot "test -e /etc/mtab"'
   file_name="/usr/lib/live/build/binary_rootfs"

   $SUDO_TO_ROOT $str_replace_tool "$search" "$replace" "$file_name"

   true
}

create-debian-iso-config() {
   $SUDO_TO_ROOT rm --recursive --force "$binary_build_folder_live_build"
   mkdir --parents "$binary_build_folder_live_build"
   cd "$binary_build_folder_live_build"

   ## folder derivative-maker/live-build can be re-created using:
   ## 1. lb config
   ## 2. help-steps/live-config

   ## TODO: research
   #--apt-indices false
   #--apt-options OPTION|"OPTIONS"
   #--backports true|false
   #--bootappend-live PARAMETER|"PARAMETERS"
   #--checksums md5|sha1|sha224|sha256|sha384|sha512|none
   ## calamares
   #--debian-installer cdrom|netinst|netboot|businesscard|live|none
   ## --freedom true|false
   #--firmware-binary true|false
   #--firmware-chroot true|false
   ## fasttrack?
   #--keyring-packages PACKAGE|"PACKAGES"
   #--cache-stages "bootstrap rootfs"

   ## TODO: apt --error-on=any
   ## TODO: mmdebstrap
   ## TODO: onion

   ## TODO: lb config --clean

   ## TODO:
   ## --architecture ARCHITECTURE
   ## --distribution CODENAME
   ## --hdd-label LABEL
   ## --hdd-size SIZE
   ## --image-name NAME
   ## --iso-application NAME
   ## --iso-publisher NAME
   ## --iso-volume NAME
   ## --source

   ## TODO: live
   ## --initramfs none|live-boot
   ## --system live
   ## --chroot-filesystem ext4
   ## --binary-image hdd
   ## --bootloaders grub-efi

   ## TODO: kernel headers
   ## --linux-packages PACKAGE|"PACKAGES"

   ## '--variant=required' is only supported by 'mmdebstrap'. It might not be supported by 'debootstrap'.

   ## --cache-packages false
   ## mmdebstrap: fix debootstrap, live-boot compatibility / support --download-only, --foreign, --second-stage, --no-check-gpg
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1031932

#          --apt-recommends false \
#          --apt-source-archives false \
#          --debootstrap-options "--variant=minbase" \

   ## --apt-http-proxy "${REPO_PROXY}" \ ## speeds up debootstrap
   ## --binary-filesystem ext4 \ ## Not useful for ISO.
   ## --chroot-filesystem ext4 \ ## Breaks build due to live-build /etc/mtab bug.

   $SUDO_TO_ROOT \
      lb config \
         --apt-http-proxy "${REPO_PROXY}" \
         --distribution "$dist_build_apt_stable_release" \
         --mirror-binary "$dist_build_apt_sources_mirror" \
         --mirror-binary-security "$dist_build_apt_sources_security_mirror" \
         --mirror-bootstrap "$dist_build_apt_sources_mirror" \
         --mirror-chroot "$dist_build_apt_sources_mirror" \
         --mirror-chroot-security "$dist_build_apt_sources_security_mirror" \
         --mirror-debian-installer "$dist_build_apt_sources_mirror" \
         --parent-mirror-binary "$dist_build_apt_sources_mirror" \
         --parent-mirror-binary-security "$dist_build_apt_sources_security_mirror" \
         --parent-mirror-bootstrap "$dist_build_apt_sources_mirror" \
         --parent-mirror-chroot "$dist_build_apt_sources_mirror" \
         --parent-mirror-chroot-security "$dist_build_apt_sources_security_mirror" \
         --parent-mirror-debian-installer "$dist_build_apt_sources_mirror" \
         --archive-areas "main contrib non-free non-free-firmware" \
         --cache-packages false \
         --source false \
         --zsync false \
         --chroot-filesystem ext4 \
         --verbose \
         --debug

   ## For testing only if not installing a derivative-maker (Kicksecure or Whonix) meta package.
   #ls -la
   #realpath ./config/package-lists/my.list.chroot || true
   #echo "task-lxde-desktop firefox-esr" | $SUDO_TO_ROOT tee ./config/package-lists/my.list.chroot >/dev/null

   ## Running 'lb config' should not result in any further changes.
   #$SUDO_TO_ROOT lb config

   $SUDO_TO_ROOT lb config --dump

   $SUDO_TO_ROOT lb config --validate
}

create-debian-iso-chroot() {
   #make-live-build-use-mmdebstrap

   etc-mtab-workaround

   if $SUDO_TO_ROOT mount | grep home | grep nosuid | grep nodev ; then
      ## Required in Qubes and other operating systems that configure nosuid, nodev mount options.
      $SUDO_TO_ROOT mount -o remount,suid,dev /home
   fi

   ## Folder live-build in the derivative-maker source folder's root serves as a
   ## textual template for Debian's live-build 'lb' tool.
   ## The live-build template folder is copied from the derivative-maker source
   ## folder to the derivative-maker binary folder.
   ## This is done because live-build creates binaries in the folder from where
   ## it is being run.
   ## This has nothing to do with Qubes Templates.
   cd "$binary_build_folder_live_build"

   ## functional:
   ## debootstrap

   ## 'lb build' internally runs 'debootstrap'.
   ## The word 'chroot' is set in live-build 'lb'.
   ## It is the folder name where live-build expects "$DEBOOTSTRAP" to bootstrap Debian to.
   dist_grml_mount_point="chroot"
   ## Create the ISO chroot and initial ISO.
   ## Slightly wasteful because in the over next step the ISO will be deleted
   ## but the ISO chroot will be kept. However, ISO creation is useful as a test.
   ## TODO: skip creation of ISO
   $SUDO_TO_ROOT \
      $LIVEBUILD_PREFIX \
      dist_build_multiarch_package_item="$dist_build_target_arch" \
      dist_grml_mount_point="$dist_grml_mount_point" \
      lb build \
      --verbose \
      --debug

   ## Delete the ISO but keep the ISO chroot.
#    $SUDO_TO_ROOT \
#       $LIVEBUILD_PREFIX \
#       dist_build_multiarch_package_item="$dist_build_target_arch" \
#       lb clean --binary

   true
}

main() {
   if [ ! "$dist_build_iso" = "true" ]; then
      true "${green}INFO: Skipping $BASH_SOURCE, because $dist_build_iso is not set to true.${reset}"
      return 0
   fi

   create-debian-iso-config
   create-debian-iso-chroot
}

main "$@"
