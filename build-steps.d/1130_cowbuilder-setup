#!/bin/bash

## Copyright (C) 2012 - 2022 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## example usage:

#sudo --preserve-env make_cross_build_platform_list="armel armhf i386 amd64 arm64" ./build-steps.d/1130_cowbuilder-setup --build --allow-untagged true --allow-uncommitted true --internalrun --target root

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

## TODO
#VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

cowbuilder_setup() {
   if cowbuilder_setup_do ; then
      true "$FUNCNAME: success"
   else
      true "$FUNCNAME: try again"
      cowbuilder_setup_do
   fi
}

cowbuilder_setup_do() {
   true "${bold}${green}INFO${reset}: Setting up cowbuilder..."

   dist_build_sources_list_primary_contents="$(cat "$dist_build_sources_list_primary")"
   export dist_build_sources_list_primary_contents

   if [ "$dist_build_unsafe_io" = "true" ]; then
      eatmydata_maybe_install="eatmydata"
   fi

   if ! test -f /etc/hostname ; then
      ## mmdebstrap requires /etc/hostname to exist.
      touch /etc/hostname
   fi

   if [ "$dist_build_unsafe_io" = "true" ]; then
      if mount | grep /var/cache/pbuilder | grep tmpfs ; then
         true "INFO: /var/cache/pbuilder already tmpfs."
      else
         mount -t tmpfs -o size=2G none /var/cache/pbuilder
      fi
   fi

   ## Debugging.
   cat "$dist_build_pbuilder_config_file"

   for dist_build_multiarch_package_item in $make_cross_build_platform_list ; do
      export dist_build_multiarch_package_item

      ## TODO: change that folder
      cow_folder="/var/cache/pbuilder/cow.cow_${dist_build_multiarch_package_item}"
      base_folder="/var/cache/pbuilder/base.cow_${dist_build_multiarch_package_item}"

      if [ -d "$base_folder" ]; then
         "$dist_source_help_steps_folder/umount_kill.sh" "$base_folder/"
         rm --recursive --force "$base_folder"
      fi

      local cowbuilder_exit_code
      cowbuilder_exit_code=0

      ## '--mirror "$dist_build_apt_sources_mirror"' should be only cosmetic,
      ## because of pbuilder-debootstrap-command-filter and hooks.
      ##
      ## Duplicate --extrapackages to prevent removal by pbuilder.
      $COWBUILDER_PREFIX \
      SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH" \
         cowbuilder \
            --architecture "$dist_build_multiarch_package_item" \
            --configfile "$dist_build_pbuilder_config_file" \
            --create \
            --basepath "$base_folder" \
            --buildplace "$cow_folder" \
            --distribution "$dist_build_apt_stable_release" \
            --mirror "$dist_build_apt_sources_mirror" \
            --debootstrap "$dist_source_help_steps_folder/pbuilder-debootstrap-command-filter" \
            --hookdir "$dist_source_help_steps_folder/pbuilder-hooks" \
            --extrapackages "sudo devscripts debhelper strip-nondeterminism fakeroot apt-transport-tor eatmydata aptitude cowdancer fasttrack-archive-keyring" \
            || { cowbuilder_exit_code="$?" ; true; };

      if [ -d "$base_folder" ]; then
         "$dist_source_help_steps_folder/umount_kill.sh" "$base_folder/"
      fi

      if [ ! "$cowbuilder_exit_code" = "0" ]; then
         return "$cowbuilder_exit_code"
      fi

      ## help-steps/pbuilder-hooks/G10sources_list_restore.bsh should have restored it already.
      ## `pbuilder` component `/usr/lib/pbuilder/pbuilder-createbuildenv`
      ## unfortunately runs function `installaptlines` after `${DEBOOTSTRAP}`,
      ## which uses a different sources list. This pbuilder hook script restores
      ## Whonix build APT sources list.
      true "Sanity test. Security critical. Comparing Whonix build sources list with chroot sources list."
      diff "$dist_build_sources_list_primary" "$base_folder/etc/apt/sources.list"

      cp "$dist_build_sources_list_primary" "$base_folder/etc/apt/sources.list"
      mkdir -p "$base_folder/home/$user_name"
      cp "$dist_build_pbuilder_config_file" "$base_folder/home/$user_name/pbuilder_config_file"

#       mkdir -p "$base_folder/home/$user_name"
#       if [ "$base_folder/home/$user_name/genmkfile" = "/home/$user_name/genmkfile" ]; then
#          error "Bug! base_folder variable is probably empty!"
#       else
#          rm -r -f "$base_folder/home/$user_name/genmkfile"
#       fi
#       cp -r "$source_code_folder_dist/packages/genmkfile" "$base_folder/home/$user_name/genmkfile"
#       chown --recursive $user_name:$user_name "$base_folder/home/$user_name"

      cowbuilder_exit_code=0
      $COWBUILDER_PREFIX \
      SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH" \
         cowbuilder \
            --architecture "$dist_build_multiarch_package_item" \
            --configfile "$dist_build_pbuilder_config_file" \
            --execute "$dist_build_pbuilder_chroot_script" \
            --basepath "$base_folder" \
            --buildplace "$cow_folder" \
            --save-after-login \
            || { cowbuilder_exit_code="$?" ; true; };

      if [ -d "$base_folder" ]; then
         "$dist_source_help_steps_folder/umount_kill.sh" "$base_folder/"
      fi

      if [ ! "$cowbuilder_exit_code" = "0" ]; then
         return "$cowbuilder_exit_code"
      fi
   done

   true "${bold}${green}INFO${reset}: cowbuilder setup done."
}

main() {
   if [ "$build_remote_derivative_pkgs" = "true" ]; then
      true "${cyan}INFO: build_remote_derivative_pkgs is set to $build_remote_derivative_pkgs, skipping cowbuilder setup.${reset}"
      return 0
   fi
   root_check "$@"
   cowbuilder_setup "$@"
}

main "$@"
