#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

## TODO
#VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

build_machine_setup() {
   if [ "$dist_build_fast1" = "1" ]; then
      true "${bold}${cyan}INFO: run with '--fast 1' switch, skipping $BASH_SOURCE. ${reset}"
      exit 0
   fi

   ## {{ users and groups

   ## TODO: Still needed?
   ## Check if user "$user_name" already exist.
   local id_exit_code
   id_exit_code="0"
   id "$user_name" || { id_exit_code="$?" ; true; };
   if [ "$id_exit_code" = "1" ]; then
      true 'INFO: Creating user "$user_name" with password "changeme", because some things have to be run as "$user_name".'
      if command -v qubesdb-read >/dev/null 2>&1 ; then
         password=""
      else
         ## setting password of user clearnet to changeme
         ##
         ## How this password was created:
         ## sudo apt-get install whois
         ## mkpasswd
         ## changeme
         ## Resulted in: aTayYxVyw5kDo
         password="aTayYxVyw5kDo"
      fi
      $SUDO_TO_ROOT useradd --password "$password" --user-group --create-home --shell /bin/bash "$user_name"
   elif [ "$id_exit_code" = "0" ]; then
      true "${cyan}INFO: Not creating user \"$user_name\" with password \"changeme\", because it already exists.${reset}"
   else
      true "${red}${bold}ERROR: id_exit_code was neither 1 or 0, it was: ${id_exit_code}${reset}"
      error "See above!"
   fi

   ## Add user to sudo group.
   ## TODO: Still needed?
   $SUDO_TO_ROOT adduser "$user_name" sudo

   ## }}

   if [ ! "$dist_build_unattended_pkg_install" = "1" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local apt_unattended_opts="--option Dpkg::Options=--force-confold"
   fi

   ## Debugging.
   true 'INFO: Benchmarking "$SUDO_TO_ROOT echo "This is a test echo." using "time"...'
   time $SUDO_TO_ROOT echo "This is a test echo."

   true "INFO: Updating git sub modules..."

   git submodule sync --recursive
   git submodule update --init --recursive --jobs=200

   true "INFO: Updated git sub modules."

   $SUDO_TO_ROOT \
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$dist_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         update

   if [ ! "$dist_build_upgrade_build_machine" = "0" ]; then
      ## Update package lists and upgrade.
      $SUDO_TO_ROOT \
         apt-get \
            ${APTGETOPT[@]} \
            -o Dir::Etc::sourcelist="$dist_build_sources_list_primary" \
            -o Dir::Etc::sourceparts="-" \
            $apt_unattended_opts \
            --no-install-recommends \
            --yes \
               dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   local packages_to_be_installed
   packages_to_be_installed+=" $dist_build_script_build_dependency "

   if [ "$eatmydata_install" = "true" ]; then
      true "INFO: Installing eatmydata, because using '--unsafe-io true'."
      packages_to_be_installed+=" $eatmydata "
   else
      true "INFO: Not installing eatmydata, because not using '--unsafe-io true'."
   fi

   if [ "$dist_build_install_to_root" = "true" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      local bare_metal_basic_package_list
      bare_metal_basic_package_list="$(grep -vE "^\s*#" "$source_code_folder_dist/grml_packages" | tr "\n" " ")"
      packages_to_be_installed+=" $bare_metal_basic_package_list "
   else
      if [ "$dist_build_virtualbox" = "true" ]; then
         #######################################################################
         ## Build Dependencies for creating VirtualBox Images (.vdi and .ova)  #
         #######################################################################
         ## uname -r returns on Qubes:
         ## 4.4.31-11.pvops.qubes.x86_64
         local linux_headers
         if command -v qubesdb-read >/dev/null 2>&1 ; then
            linux_headers="linux-headers-amd64"
         else
            linux_headers="linux-headers-${host_architecture}"
         fi
         packages_to_be_installed+=" $linux_headers "

         true "INFO: Checking if VirtualBox is already installed..."
         if virtualbox_version_installed="$(dpkg-query --show --showformat='${Version}' "virtualbox")" ; then
            true "INFO: virtualbox is already installed."
         elif virtualbox_version_installed="$(dpkg-query --show --showformat='${Version}' "virtualbox-6.1")" ; then
            true "INFO: virtualbox-6.1 is already installed."
         else
            true "${red}${bold}ERROR: Neither package virtualbox nor package virtualbox-6.1 is installed. Please install as per build documentation.${reset}"
            error "See above!"
         fi

      fi

      if [ "$dist_build_iso" = "true" ]; then
          packages_to_be_installed+=" live-build "
      fi
   fi

   $SUDO_TO_ROOT \
      apt-get \
         ${APTGETOPT[@]} \
         -o Dir::Etc::sourcelist="$dist_build_sources_list_primary" \
         -o Dir::Etc::sourceparts="-" \
         $apt_unattended_opts \
         --no-install-recommends \
         --yes \
         install \
         $packages_to_be_installed

   if [ "$dist_build_internal_run" = "1" ]; then
      true
   else
      if [ "$dist_build_virtualbox" = "true" ]; then
         ## VirtualBox will be be installed at this point.
         "$dist_source_help_steps_folder/vm-exists-test"
      fi
   fi

   ## Debugging.
   $SUDO_TO_ROOT cat /usr/sbin/policy-rc.d || true

   ## Debugging.
   #$SUDO_TO_ROOT cat /proc/devices
}

repo_proxy_setup() {
   if [ "$REPO_PROXY" = "" ]; then
      return 0
   fi
   if [ "$REPO_PROXY" = "none" ]; then
      return 0
   fi
   if [ ! "$REPO_PROXY" = "http://127.0.0.1:3142" ]; then
      return 0
   fi

   if grep -q "AllowUserPorts: 0\$" /etc/apt-cacher-ng/acng.conf ; then
      true "INFO: 'AllowUserPorts: 0' already in /etc/apt-cacher-ng/acng.conf, ok."
      return 0
   fi

   true "INFO: Adding 'AllowUserPorts: 0' to /etc/apt-cacher-ng/acng.conf"
   echo "AllowUserPorts: 0" | $SUDO_TO_ROOT tee -a "/etc/apt-cacher-ng/acng.conf" >/dev/null
   $SUDO_TO_ROOT systemctl restart apt-cacher-ng.service

   true
}

repo_proxy_test() {
   if [ "$REPO_PROXY" = "" ]; then
      return 0
   fi
   if [ "$REPO_PROXY" = "none" ]; then
      return 0
   fi

   true "INFO: Testing REPO_PROXY $REPO_PROXY (most likely apt-cacher-ng, since default)..."
   local curl_exit_code=0
   curl --fail --silent "$REPO_PROXY" || { curl_exit_code="$?" ; true; };
   if [ "$curl_exit_code" = "22" ]; then
      true "INFO: apt-cacher-ng functional..."
      return 0
   fi

   true "${red}${bold}ERROR: REPO_PROXY curl curl_exit_code: $curl_exit_code. REPO_PROXY $REPO_PROXY unreachable! Does a local firewall blcok connections to REPO_PROXY?${reset}"
   error "See above!"
}

main() {
   build_machine_setup "$@"
   repo_proxy_setup
   repo_proxy_test "$@"
}

main "$@"
