#!/bin/bash

## Copyright (C) 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

create-debian-iso-chroot() {
   $SUDO_TO_ROOT cp --no-clobber --verbose /usr/sbin/debootstrap /usr/sbin/debootstrap-backup
   ## live-build: support configuration of debootstrap binary
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1031929
   ## Functional.
   #$SUDO_TO_ROOT cp --verbose "$dist_source_help_steps_folder/pbuilder-debootstrap-command-filter" /usr/sbin/debootstrap
   ## Test.
   if test -f /usr/sbin/debootstrap ; then
      $SUDO_TO_ROOT rm --verbose --force /usr/sbin/debootstrap
   fi
   if test -h /usr/sbin/debootstrap ; then
      $SUDO_TO_ROOT unlink /usr/sbin/debootstrap
   fi
   $SUDO_TO_ROOT ln -s "$dist_source_help_steps_folder/pbuilder-debootstrap-command-filter" /usr/sbin/debootstrap
   ## Debugging.
   ls -la /usr/sbin/debootstrap

   ## Folder live-build in the derivative-maker source folder's root serves as a
   ## textual template for Debian's live-build 'lb' tool.
   ## The live-build template folder is copied from the derivative-maker source
   ## folder to the derivative-maker binary folder.
   ## This is done because live-build creates binaries in the folder from where
   ## it is being run.
   ## This has nothing to do with Qubes Templates.
   mkdir --parents "$binary_build_folder_dist/"
   $SUDO_TO_ROOT rm --recursive --force "$binary_build_folder_live_build"
   cp --recursive "$source_code_folder_dist/live-build" "$binary_build_folder_live_build"
   cd "$binary_build_folder_live_build"

   ## Might be optional but cleaner/safer to run first.
   ## Optional during development.
   $SUDO_TO_ROOT lb clean

   $SUDO_TO_ROOT lb config
   $SUDO_TO_ROOT lb config --validate

   ## 'lb build' internally runs 'debootstrap'.
   ## The word 'chroot' is set in live-build 'lb'.
   ## It is the folder name where live-build expects "$DEBOOTSTRAP" to bootstrap Debian to.
   dist_grml_mount_point="chroot"
   ## Create the ISO chroot and initial ISO.
   ## Slightly wasteful because in the over next step the ISO will be deleted
   ## but the ISO chroot will be kept. However, ISO creation is useful as a test.
   $SUDO_TO_ROOT \
      $LIVEBUILD_PREFIX \
      dist_build_multiarch_package_item="$dist_build_target_arch" \
      dist_grml_mount_point="$dist_grml_mount_point" \
      lb build

   ## Delete the ISO but keep the ISO chroot.
   $SUDO_TO_ROOT \
      $LIVEBUILD_PREFIX \
      dist_build_multiarch_package_item="$dist_build_target_arch" \
      lb clean --binary

   true
}

main() {
   if [ ! "$dist_build_iso" = "true" ]; then
      true "${green}INFO: Skipping $BASH_SOURCE, because $dist_build_iso is not to true.${reset}"
      return 0
   fi

   if [ "$dist_build_type_long" = "custom-workstation" ]; then
      true
   elif [ "$dist_build_type_long" = "gateway" ]; then
      true
   elif [ "$dist_build_type_long" = "workstation" ]; then
      true
   elif [ "$dist_build_type_long" = "whonix-host" ]; then
      create-debian-iso-chroot
   elif [ "$dist_build_type_long" = "kicksecure" ]; then
      create-debian-iso-chroot
   else
      error "ERROR: Invalid dist_build_flavor $dist_build_flavor (dist_build_type_long: $dist_build_type_long). Please report this bug!"
   fi
}

main "$@"
