#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## general example usage:

## TODO: always check packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list first!

## 1)
#sudo -E make_cross_build_platform_list="i386 amd64 arm64" ./build-steps.d/1130_cowbuilder-setup --build --allow-untagged true --allow-uncommitted true --internalrun --target root

## 2) sudo -E make_cross_build_platform_list="i386 amd64 arm64" ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target root

## specific example usage:

#sudo -E make_cross_build_platform_list="i386 amd64 arm64" ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target root --function download_tpo_packages

#sudo -E temp_newer_packages= ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target virtualbox --function reprepro_add_newer_packages

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

download_tpo_packages() {
   ## https://forums.whonix.org/t/tor-integration-in-whonix/10593/2
   available_architectures_for_download_only_list="i386 amd64 arm64"
   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/repo_download_chroot_script"
   repo_signing_key="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d/torprojectarchive.asc"
   repo_sources_list="$whonix_build_sources_list_torproject"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_tpo"
   export download_source_package="true"

   ## Selected packages we want to mirror from deb.torproject.org to Whonix local/remote repository.
   newer_package_list="tor tor-geoipdb deb.torproject.org-keyring"

   build_run_function get_newer_packages "$@"
}

## https://forums.whonix.org/t/missing-dependencies-on-buster-for-virtualbox-6-1-6/9634
#sudo -E ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target virtualbox --function download_virtualbox_packages_virtualbox_org
download_virtualbox_packages_virtualbox_org() {
   ## Only when using '--target virtualbox'.
   if [ ! "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true "${green}INFO: Skipping $FUNCNAME, because WHONIX_BUILD_VIRTUALBOX is not set to 'true'.${reset}"
      return 0
   fi

   ## XXX: Better set to "i386 amd64" which are the only actually available platforms for this repo_sources_list?
   ## Or better set available_architectures_for_download_only_list="all" to make the build process fail early?
   ## But does not matter since this code is only processed when using '--target virtualbox'.
   ## Only platforms i386 amd64 are available from this repo_sources_list.
   ## (Even packages.debian.org having amd64 only https://packages.debian.org/sid/virtualbox at time of writing.)
   ## Creating '--target virtualbox' on platforms other than amd64 such as arm64 would fail anyhow since
   ## nobody is providing packages for these platforms. At time of writing, nobody reported trying that either.
   available_architectures_for_download_only_list="i386 amd64"
   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/repo_download_chroot_script"
   repo_signing_key="$WHONIX_SOURCE_FOLDER/build_sources/oracle_vbox_2016.asc"
   repo_sources_list="$WHONIX_SOURCE_FOLDER/build_sources/debian_buster_backport_virtualbox_org.list"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_virtualbox_org"
   ## Not available from that repository but from Debian directly.
   export download_source_package="false"

   ## Selected packages we want to mirror from repo_sources_list to Whonix local/remote repository.
   newer_package_list="virtualbox-6.1"

   build_run_function get_newer_packages "$@"
}

## See:
## https://forums.whonix.org/t/challenges-installing-virtualbox/9984/7
##
## comment outdated:
##
## Upstream virtualbox.org does not provide guest additions debian packages:
## (Neither VirtualBox guest addition ISO nor VirtualBox guest addition debian package.)
## https://www.virtualbox.org/ticket/734
##
## https://packages.debian.org/bullseye/virtualbox-guest-additions-iso
## provides:
## /usr/share/virtualbox/VBoxGuestAdditions.iso
##
## nonfreedom vs freedom discussion:
## https://www.whonix.org/wiki/Dev/VirtualBox#VirtualBox_Unavailable_in_Debian_main_due_to_Licensing_Issues
## https://forums.virtualbox.org/viewtopic.php?f=10&t=21374&p=477656#p477656
## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=962311
## https://www.virtualbox.org/ticket/19751
##
#sudo -E ./build-steps.d/1200_create-debian-packages --build --allow-untagged true --allow-uncommitted true --internalrun --target virtualbox --function download_virtualbox_packages_from_debian_sid
download_virtualbox_packages_from_debian_sid() {
   if [ ! "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
      true "${green}INFO: Skipping $FUNCNAME, because WHONIX_BUILD_VIRTUALBOX is not set to 'true'.${reset}"
      return 0
   fi

   available_architectures_for_download_only_list="all"
   whonix_build_special_packages_chroot_script="$WHONIX_SOURCE_HELP_STEPS_FOLDER/repo_download_chroot_script"
   repo_signing_key="none"
   repo_sources_list="$whonix_build_sources_list_debian_sid"
   temp_newer_packages="$WHONIX_BINARY/temp_packages_virtualbox"
   export download_source_package="true"

   ## Selected packages we want to mirror from repo_sources_list to Whonix local/remote repository.
   #newer_package_list="virtualbox-guest-additions-iso"

   ## quote debian/changelog
   ## * Drop virtualbox guest modules dkms and sources, as in Ubuntu and Debian,
   ## all kernel flavours provide those from the upstream kernel since at least
   ## focal 20.04 LTS.
   ## Thus these are not needed anymore. LP: #1933248
   ##
   ## please drop virtualbox-guest-dkms virtualbox-guest-source
   ## https://bugs.launchpad.net/ubuntu/+source/virtualbox/+bug/1933248
   newer_package_list=""
   newer_package_list+=" virtualbox "
   newer_package_list+=" virtualbox-dkms "
   newer_package_list+=" virtualbox-guest-utils "
   newer_package_list+=" virtualbox-guest-x11 "
   newer_package_list+=" virtualbox-qt "
   newer_package_list+=" virtualbox-source "
   newer_package_list+=" virtualbox-guest-additions-iso "

   build_run_function get_newer_packages "$@"
}

get_newer_packages() {
   local cow_folder base_folder

   rm --recursive --force "$temp_newer_packages"
   sudo $SUDO_OPTS mkdir --parents "$temp_newer_packages"

   for whonix_build_multiarch_package_item in $make_cross_build_platform_list ; do
      export whonix_build_multiarch_package_item

      architecture_available=""
      for available_architectures_for_download_only_item in $available_architectures_for_download_only_list ; do
         if [ "all" = "$available_architectures_for_download_only_item" ]; then
            true "${cyan}INFO: available_architectures_for_download_only_item: '$available_architectures_for_download_only_item'${reset}"
            architecture_available="true"
            continue
         fi
         if [ "$whonix_build_multiarch_package_item" = "$available_architectures_for_download_only_item" ]; then
            true "${cyan}INFO: available_architectures_for_download_only_item: '$available_architectures_for_download_only_item'${reset}"
            architecture_available="true"
            continue
         fi
      done
      if [ ! "$architecture_available" = "true" ]; then
         true "${red}${bold}INFO: Skipping,
download newer_package_list: ${under}$newer_package_list${eunder}
for platform: ${under}$whonix_build_multiarch_package_item${eunder}
becuase whonix_build_multiarch_package_item: $whonix_build_multiarch_package_item
is not included in available_architectures_for_download_only_list: $available_architectures_for_download_only_list${reset}"
         return 0
      fi

      if [ "$make_use_cowbuilder" = "true" ]; then
         ## TODO: change that folder
         cow_folder="/var/cache/pbuilder/cow.cow_${whonix_build_multiarch_package_item}"
         base_folder="/var/cache/pbuilder/base.cow_${whonix_build_multiarch_package_item}"

         test -d "$base_folder"
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
      else
         base_folder="$WHONIX_BINARY/no-pbuilder/base"
         ## Not needed. For completeness sake. Just in case.
         cow_folder="$WHONIX_BINARY/no-pbuilder/cow"

         if_no_pbuilder_base_folder="$base_folder"
         export if_no_pbuilder_base_folder
      fi

      sudo $SUDO_OPTS mkdir -p "$base_folder/tmp/temporary-repository"

      if [ "$repo_signing_key" = "none" ]; then
         rm -f "$base_folder/tmp/temporary-repository/repo_signing_key.asc"
      else
         cp "$repo_signing_key" "$base_folder/tmp/temporary-repository/repo_signing_key.asc"
      fi

      if [ "$repo_sources_list" = "none" ]; then
         rm -f "$base_folder/tmp/temporary-repository/newer.list"
      else
         cp "$repo_sources_list" "$base_folder/tmp/temporary-repository/newer.list"
      fi

      cp "$whonix_build_pbuilder_config_file" "$base_folder/tmp/"

      local benchmark_time_start benchmark_took_time
      benchmark_time_start="$(date +%s)" || true
      local whonix_build_download_script_exit_code
      whonix_build_download_script_exit_code=0

      if [ "$make_use_cowbuilder" = "true" ]; then
         $COWBUILDER_PREFIX \
         newer_package_list="$newer_package_list" \
         temp_newer_packages="$temp_newer_packages" \
            cowbuilder \
               --host-arch "$host_architecture" \
               --architecture "$BUILD_TARGET_ARCH" \
               --configfile "$whonix_build_pbuilder_config_file" \
               --execute "$whonix_build_special_packages_chroot_script" \
               --basepath "$base_folder" \
               --buildplace "$cow_folder" \
               --bindmounts "$temp_newer_packages" \
               || { whonix_build_download_script_exit_code="$?" ; true; };

            if [ -d "$base_folder" ]; then
               "$WHONIX_SOURCE_HELP_STEPS_FOLDER/umount_kill.sh" "$base_folder/"
            fi
      else
         export newer_package_list
         export temp_newer_packages
         "$whonix_build_special_packages_chroot_script" || { whonix_build_download_script_exit_code="$?" ; true; };

         ## XXX
         ## help-steps/repo_download_chroot_script messes up APT downloaded sources
         apt-get ${APTGETOPT[@]} update
      fi

      chown --recursive "$user_name:$user_name" "$temp_newer_packages"

      benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
      true "${cyan}INFO: Done with build '${FUNCNAME[1]}' (benchmark: $benchmark_took_time) ${reset}"

      if [ ! "$whonix_build_download_script_exit_code" = "0" ]; then
         return "$whonix_build_download_script_exit_code"
      fi
   done

   reprepro_add_newer_packages
}

reprepro_add_newer_packages() {
   if [ "$temp_newer_packages" = "" ]; then
      error "Variable temp_newer_packages is empty!"
   fi

   local file_name package_absolute_path file_name_only

   for file_name in "$temp_newer_packages/"*".deb" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      file_name_only="${package_absolute_path##*/}"
      package=${file_name_only%%_*}

      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" remove "$WHONIX_BUILD_APT_CODENAME" "$package" || true
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" removesrc "$WHONIX_BUILD_APT_CODENAME" "$package" || true
   done

   for file_name in "$temp_newer_packages/"*".dsc" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      file_name_only="${package_absolute_path##*/}"
      package=${file_name_only%%_*}

      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" remove "$WHONIX_BUILD_APT_CODENAME" "$package" || true
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" removesrc "$WHONIX_BUILD_APT_CODENAME" "$package" || true
   done

   for file_name in "$temp_newer_packages/"*".deb" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedeb "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   for file_name in "$temp_newer_packages/"*".dsc" ; do
      package_absolute_path="$(readlink -f "$file_name")"
      sudo $SUDO_OPTS -E "$whonix_dev_meta_files_folder/debug-steps/reprepro-wrapper" includedsc "$WHONIX_BUILD_APT_CODENAME" "$package_absolute_path"
   done

   true "${cyan}$BASH_SOURCE INFO: Got newer packages. ${reset}"
}

create_whonix_debian_packages() {
   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   local item number_folders_total number_folder_current benchmark_time_start benchmark_took_time
   ## Thanks to: l0b0 - http://unix.stackexchange.com/a/20855/49297
   number_folders_total="$(find "$WHONIX_SOURCE_FOLDER/packages" -mindepth 1 -maxdepth 1 -type d -printf '\n' | wc -l)" || true
   number_folder_current="0"

   shopt -s nullglob
   shopt -s dotglob

   for item in $pkg_list; do
      item="$WHONIX_SOURCE_FOLDER/packages/$item"
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      pushd "$item"
      number_folder_current="$(( number_folder_current + 1 ))"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "developer-meta-files" ]; then
         true "${cyan}INFO: Skipping $base_name as expected.${reset}"
         popd
         continue
      fi

      ## 'Architecture:' currently in ./packages/ folder:
      ## all
      ## any
      ## amd64
      ## linux-amd64
      if cat "debian/control" | grep --invert-match "\#" | grep "Architecture:" | grep "all" ; then
         true "DEBUG: Architecture: all"
      elif cat "debian/control" | grep --invert-match "\#" | grep "Architecture:" | grep "any" ; then
         true "DEBUG: Architecture: any"
      elif cat "debian/control" | grep --invert-match "\#" | grep "Architecture:" | grep "amd64" ; then
         true "DEBUG: Architecture: amd64"
         if [ ! "$BUILD_TARGET_ARCH" = "amd64" ]; then
            true "${cyan}INFO: Skipping platform 'amd64' specific package $base_name as expected.${reset}"
            popd
            continue
         fi
      elif cat "debian/control" | grep --invert-match "\#" | grep "Architecture:" | grep "linux-amd64" ; then
         true "DEBUG: Architecture: linux-amd64"
         if [ ! "$BUILD_TARGET_ARCH" = "amd64" ]; then
            true "${cyan}INFO: Skipping platform 'linux-amd64' specific package $base_name as expected.${reset}"
            popd
            continue
         fi
      else
         cat "debian/control" | grep "Architecture:" || true
         error "unknown Architecture:"
      fi

      true "${cyan}INFO: Will build now package ($number_folder_current / $number_folders_total): $base_name ${reset}"
      benchmark_time_start="$(date +%s)" || true
      lintian_use_maybe="$make_use_lintian"
      ## Using -E so environment variables make_use_lintian, make_use_cowbuilder, WHONIX_BUILD_APT_CODENAME gets passed.
      sudo $SUDO_OPTS -E "$WHONIX_SOURCE_FOLDER/packages/genmkfile/usr/bin/genmkfile" reprepro-remove
      "$WHONIX_SOURCE_FOLDER/packages/genmkfile/usr/bin/genmkfile" deb-cleanup
      if [ "$make_use_cowbuilder" = "false" ]; then
         "$WHONIX_SOURCE_FOLDER/packages/genmkfile/usr/bin/genmkfile" deb-build-dep
      fi
      sudo $SUDO_OPTS -E "$WHONIX_SOURCE_FOLDER/packages/genmkfile/usr/bin/genmkfile" deb-pkg
      sudo $SUDO_OPTS -E "$WHONIX_SOURCE_FOLDER/packages/genmkfile/usr/bin/genmkfile" reprepro-add
      benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
      popd
      true "${cyan}INFO: Done with build of package ($number_folder_current / $number_folders_total) (benchmark: $benchmark_took_time): $base_name ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create-debian-packages() {
   if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
      error "Variable WHONIX_BUILD_APT_CODENAME is empty!"
   fi
   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   true "make_cross_build_platform_list: ${under}$make_cross_build_platform_list${eunder}"
   #sleep 3

   if [ ! "$FUNCTION" = "" ]; then
      $FUNCTION
      return 0
   fi

   #build_run_function download_virtualbox_packages_virtualbox_org "$@"
   #build_run_function download_virtualbox_packages_from_debian_sid "$@"

   ## https://www.whonix.org/wiki/Dev/Tor
   ## https://forums.whonix.org/t/tor-integration-in-whonix/10593
   build_run_function download_tpo_packages "$@"

   build_run_function create_whonix_debian_packages "$@"
}

main() {
   build_run_function root_check "$@"
   if [ "$WHONIX_BUILD_FLAVOR" = "whonix-custom-workstation" ]; then
      true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
   elif [ "$build_remote_derivative_pkgs" = "true" ]; then
      true "${cyan}INFO: build_remote_derivative_pkgs is set to $build_remote_derivative_pkgs, skipping creation of packages.${reset}"
   else
      build_run_function create-debian-packages "$@"
   fi
}

build_run_function main "$@"
